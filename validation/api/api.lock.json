[
  {
    "name": "Array",
    "exports": [
      "public func all<T>(array : [T], predicate : T -> Bool) : Bool",
      "public func any<T>(array : [T], predicate : T -> Bool) : Bool",
      "public func compare<T>(array1 : [T], array2 : [T], compare : (T, T) -> Order.Order) : Order.Order",
      "public func concat<T>(array1 : [T], array2 : [T]) : [T]",
      "public func empty<T>() : [T]",
      "public func equal<T>(array1 : [T], array2 : [T], equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(array : [T], f : T -> Bool) : [T]",
      "public func filterMap<T, Y>(array : [T], f : T -> ?Y) : [Y]",
      "public func find<T>(array : [T], predicate : T -> Bool) : ?T",
      "public func flatMap<T, R>(array : [T], k : T -> [R]) : [R]",
      "public func flatten<T>(arrays : Iter.Iter<[T]>) : [T]",
      "public func foldLeft<T, A>(array : [T], base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(array : [T], base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(array : [T], f : T -> ())",
      "public func fromIter<T>(iter : Iter.Iter<T>) : [T]",
      "public func fromVarArray<T>(varArray : [var T]) : [T]",
      "public func generate<T>(size : Nat, generator : Nat -> T) : [T]",
      "public func indexOf<T>(element : T, array : [T], equal : (T, T) -> Bool) : ?Nat",
      "public func init<T>(size : Nat, initValue : T) : [T]",
      "public func isEmpty<T>(array : [T]) : Bool",
      "public func keys<T>(array : [T]) : Iter.Iter<Nat>",
      "public func lastIndexOf<T>(element : T, array : [T], equal : (T, T) -> Bool) : ?Nat",
      "public func map<T, Y>(array : [T], f : T -> Y) : [Y]",
      "public func mapEntries<T, R>(array : [T], f : (T, Nat) -> R) : [R]",
      "public func mapResult<T, Y, E>(array : [T], f : T -> Result.Result<Y, E>) : Result.Result<[Y], E>",
      "public func nextIndexOf<T>(element : T, array : [T], fromInclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func prevIndexOf<T>(element : T, array : [T], fromExclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func reverse<T>(array : [T]) : [T]",
      "public func singleton<T>(element : T) : [T]",
      "public func size<T>(array : [T]) : Nat",
      "public func slice<T>(array : [T], fromInclusive : Int, toExclusive : Int) : Iter.Iter<T>",
      "public func sort<T>(array : [T], compare : (T, T) -> Order.Order) : [T]",
      "public func subArray<T>(array : [T], start : Nat, length : Nat) : [T]",
      "public func toText<T>(array : [T], f : T -> Text) : Text",
      "public func toVarArray<T>(array : [T]) : [var T]",
      "public func values<T>(array : [T]) : Iter.Iter<T>"
    ]
  },
  {
    "name": "Blob",
    "exports": [
      "public func compare(b1 : Blob, b2 : Blob) : { #less; #equal; #greater }",
      "public func empty() : Blob",
      "public func equal(blob1 : Blob, blob2 : Blob) : Bool",
      "public func fromArray(bytes : [Nat8]) : Blob",
      "public func fromVarArray(bytes : [var Nat8]) : Blob",
      "public func greater(blob1 : Blob, blob2 : Blob) : Bool",
      "public func greaterOrEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func hash(blob : Blob) : Nat32",
      "public func less(blob1 : Blob, blob2 : Blob) : Bool",
      "public func lessOrEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func notEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func size(blob : Blob) : Nat",
      "public func toArray(blob : Blob) : [Nat8]",
      "public func toVarArray(blob : Blob) : [var Nat8]"
    ]
  },
  {
    "name": "Bool",
    "exports": [
      "public func allValues() : Iter.Iter<Bool>",
      "public func compare(a : Bool, b : Bool) : { #less; #equal; #greater }",
      "public func equal(a : Bool, b : Bool) : Bool",
      "public func logicalAnd(a : Bool, b : Bool) : Bool",
      "public func logicalNot(bool : Bool) : Bool",
      "public func logicalOr(a : Bool, b : Bool) : Bool",
      "public func logicalXor(a : Bool, b : Bool) : Bool",
      "public func toText(bool : Bool) : Text"
    ]
  },
  {
    "name": "CertifiedData",
    "exports": [
      "public let getCertificate : () -> ?Blob",
      "public let set : (data : Blob) -> ()"
    ]
  },
  {
    "name": "Char",
    "exports": [
      "public func allValues() : Iter.Iter<Char>",
      "public func compare(a : Char, b : Char) : { #less; #equal; #greater }",
      "public func equal(a : Char, b : Char) : Bool",
      "public let fromNat32 : (nat32 : Nat32) -> Char",
      "public func greater(a : Char, b : Char) : Bool",
      "public func greaterOrEqual(a : Char, b : Char) : Bool",
      "public let isAlphabetic : (char : Char) -> Bool",
      "public func isDigit(char : Char) : Bool",
      "public let isLower : (char : Char) -> Bool",
      "public let isUpper : (char : Char) -> Bool",
      "public let isWhitespace : (char : Char) -> Bool",
      "public func less(a : Char, b : Char) : Bool",
      "public func lessOrEqual(a : Char, b : Char) : Bool",
      "public func notEqual(a : Char, b : Char) : Bool",
      "public let toNat32 : (char : Char) -> Nat32",
      "public let toText : (char : Char) -> Text"
    ]
  },
  {
    "name": "Cycles",
    "exports": [
      "public let accept : <system>(amount : Nat) -> (accepted : Nat)",
      "public let add : <system>(amount : Nat) -> ()",
      "public let available : () -> (amount : Nat)",
      "public let balance : () -> (amount : Nat)",
      "public let refunded : () -> (amount : Nat)"
    ]
  },
  {
    "name": "Debug",
    "exports": [
      "public func print(text : Text)",
      "public func todo() : None"
    ]
  },
  {
    "name": "Error",
    "exports": [
      "public let code : (error : Error) -> ErrorCode",
      "public let message : (error : Error) -> Text",
      "public let reject : (message : Text) -> Error"
    ]
  },
  {
    "name": "Float",
    "exports": [
      "public let abs : (x : Float) -> Float",
      "public func add(x : Float, y : Float) : Float",
      "public let arccos : (x : Float) -> Float",
      "public let arcsin : (x : Float) -> Float",
      "public let arctan : (x : Float) -> Float",
      "public let arctan2 : (y : Float, x : Float) -> Float",
      "public let ceil : (x : Float) -> Float",
      "public func compare(x : Float, y : Float) : { #less; #equal; #greater }",
      "public let copySign : (x : Float, y : Float) -> Float",
      "public let cos : (x : Float) -> Float",
      "public func div(x : Float, y : Float) : Float",
      "public let e : Float",
      "public func equal(x : Float, y : Float) : Bool",
      "public func equalWithin(x : Float, y : Float, epsilon : Float) : Bool",
      "public let exp : (x : Float) -> Float",
      "public let floor : (x : Float) -> Float",
      "public func format(fmt : { #fix : Nat8; #exp : Nat8; #gen : Nat8; #exact }, x : Float) : Text",
      "public let fromInt : Int -> Float",
      "public let fromInt64 : Int64 -> Float",
      "public func greater(x : Float, y : Float) : Bool",
      "public func greaterOrEqual(x : Float, y : Float) : Bool",
      "public func isNaN(number : Float) : Bool",
      "public func less(x : Float, y : Float) : Bool",
      "public func lessOrEqual(x : Float, y : Float) : Bool",
      "public let log : (x : Float) -> Float",
      "public let max : (x : Float, y : Float) -> Float",
      "public let min : (x : Float, y : Float) -> Float",
      "public func mul(x : Float, y : Float) : Float",
      "public let nearest : (x : Float) -> Float",
      "public func neg(x : Float) : Float",
      "public func notEqual(x : Float, y : Float) : Bool",
      "public func notEqualWithin(x : Float, y : Float, epsilon : Float) : Bool",
      "public let pi : Float",
      "public func pow(x : Float, y : Float) : Float",
      "public func rem(x : Float, y : Float) : Float",
      "public let sin : (x : Float) -> Float",
      "public let sqrt : (x : Float) -> Float",
      "public func sub(x : Float, y : Float) : Float",
      "public let tan : (x : Float) -> Float",
      "public let toInt : Float -> Int",
      "public let toInt64 : Float -> Int64",
      "public let toText : Float -> Text",
      "public let trunc : (x : Float) -> Float"
    ]
  },
  {
    "name": "Func",
    "exports": [
      "public func compose<A, B, C>(f : B -> C, g : A -> B) : A -> C",
      "public func const<A, B>(x : A) : B -> A",
      "public func identity<A>(x : A) : A"
    ]
  },
  {
    "name": "Hash",
    "exports": [
      "public func bit(h : Hash, pos : Nat) : Bool",
      "public func equal(ha : Hash, hb : Hash) : Bool",
      "public func hash(n : Nat) : Hash",
      "public let length : Nat"
    ]
  },
  {
    "name": "Int",
    "exports": [
      "public func abs(x : Int) : Nat",
      "public func add(x : Int, y : Int) : Int",
      "public func compare(x : Int, y : Int) : { #less; #equal; #greater }",
      "public func div(x : Int, y : Int) : Int",
      "public func equal(x : Int, y : Int) : Bool",
      "public func greater(x : Int, y : Int) : Bool",
      "public func greaterOrEqual(x : Int, y : Int) : Bool",
      "public func hash(i : Int) : Hash.Hash",
      "public func less(x : Int, y : Int) : Bool",
      "public func lessOrEqual(x : Int, y : Int) : Bool",
      "public func max(x : Int, y : Int) : Int",
      "public func min(x : Int, y : Int) : Int",
      "public func mul(x : Int, y : Int) : Int",
      "public func neg(x : Int) : Int",
      "public func notEqual(x : Int, y : Int) : Bool",
      "public func pow(x : Int, y : Int) : Int",
      "public func range(fromInclusive : Int, toExclusive : Int) : Iter.Iter<Int>",
      "public func rangeInclusive(from : Int, to : Int) : Iter.Iter<Int>",
      "public func rem(x : Int, y : Int) : Int",
      "public func sub(x : Int, y : Int) : Int",
      "public func toText(x : Int) : Text"
    ]
  },
  {
    "name": "Int16",
    "exports": [
      "public func abs(x : Int16) : Int16",
      "public func add(x : Int16, y : Int16) : Int16",
      "public func addWrap(x : Int16, y : Int16) : Int16",
      "public func allValues() : Iter.Iter<Int16>",
      "public func bitand(x : Int16, y : Int16) : Int16",
      "public func bitclear(x : Int16, p : Nat) : Int16",
      "public let bitcountLeadingZero : (x : Int16) -> Int16",
      "public let bitcountNonZero : (x : Int16) -> Int16",
      "public let bitcountTrailingZero : (x : Int16) -> Int16",
      "public func bitflip(x : Int16, p : Nat) : Int16",
      "public func bitnot(x : Int16) : Int16",
      "public func bitor(x : Int16, y : Int16) : Int16",
      "public func bitrotLeft(x : Int16, y : Int16) : Int16",
      "public func bitrotRight(x : Int16, y : Int16) : Int16",
      "public func bitset(x : Int16, p : Nat) : Int16",
      "public func bitshiftLeft(x : Int16, y : Int16) : Int16",
      "public func bitshiftRight(x : Int16, y : Int16) : Int16",
      "public func bittest(x : Int16, p : Nat) : Bool",
      "public func bitxor(x : Int16, y : Int16) : Int16",
      "public func compare(x : Int16, y : Int16) : { #less; #equal; #greater }",
      "public func div(x : Int16, y : Int16) : Int16",
      "public func equal(x : Int16, y : Int16) : Bool",
      "public let fromInt : Int -> Int16",
      "public let fromInt32 : Int32 -> Int16",
      "public let fromInt8 : Int8 -> Int16",
      "public let fromIntWrap : Int -> Int16",
      "public let fromNat16 : Nat16 -> Int16",
      "public func greater(x : Int16, y : Int16) : Bool",
      "public func greaterOrEqual(x : Int16, y : Int16) : Bool",
      "public func less(x : Int16, y : Int16) : Bool",
      "public func lessOrEqual(x : Int16, y : Int16) : Bool",
      "public func max(x : Int16, y : Int16) : Int16",
      "public let maxValue : Int16",
      "public func min(x : Int16, y : Int16) : Int16",
      "public let minValue : Int16",
      "public func mul(x : Int16, y : Int16) : Int16",
      "public func mulWrap(x : Int16, y : Int16) : Int16",
      "public func neg(x : Int16) : Int16",
      "public func notEqual(x : Int16, y : Int16) : Bool",
      "public func pow(x : Int16, y : Int16) : Int16",
      "public func powWrap(x : Int16, y : Int16) : Int16",
      "public func range(fromInclusive : Int16, toExclusive : Int16) : Iter.Iter<Int16>",
      "public func rangeInclusive(from : Int16, to : Int16) : Iter.Iter<Int16>",
      "public func rem(x : Int16, y : Int16) : Int16",
      "public func sub(x : Int16, y : Int16) : Int16",
      "public func subWrap(x : Int16, y : Int16) : Int16",
      "public let toInt : Int16 -> Int",
      "public let toInt32 : Int16 -> Int32",
      "public let toInt8 : Int16 -> Int8",
      "public let toNat16 : Int16 -> Nat16",
      "public func toText(x : Int16) : Text"
    ]
  },
  {
    "name": "Int32",
    "exports": [
      "public func abs(x : Int32) : Int32",
      "public func add(x : Int32, y : Int32) : Int32",
      "public func addWrap(x : Int32, y : Int32) : Int32",
      "public func allValues() : Iter.Iter<Int32>",
      "public func bitand(x : Int32, y : Int32) : Int32",
      "public func bitclear(x : Int32, p : Nat) : Int32",
      "public let bitcountLeadingZero : (x : Int32) -> Int32",
      "public let bitcountNonZero : (x : Int32) -> Int32",
      "public let bitcountTrailingZero : (x : Int32) -> Int32",
      "public func bitflip(x : Int32, p : Nat) : Int32",
      "public func bitnot(x : Int32) : Int32",
      "public func bitor(x : Int32, y : Int32) : Int32",
      "public func bitrotLeft(x : Int32, y : Int32) : Int32",
      "public func bitrotRight(x : Int32, y : Int32) : Int32",
      "public func bitset(x : Int32, p : Nat) : Int32",
      "public func bitshiftLeft(x : Int32, y : Int32) : Int32",
      "public func bitshiftRight(x : Int32, y : Int32) : Int32",
      "public func bittest(x : Int32, p : Nat) : Bool",
      "public func bitxor(x : Int32, y : Int32) : Int32",
      "public func compare(x : Int32, y : Int32) : { #less; #equal; #greater }",
      "public func div(x : Int32, y : Int32) : Int32",
      "public func equal(x : Int32, y : Int32) : Bool",
      "public let fromInt : Int -> Int32",
      "public let fromInt16 : Int16 -> Int32",
      "public let fromInt64 : Int64 -> Int32",
      "public let fromIntWrap : Int -> Int32",
      "public let fromNat32 : Nat32 -> Int32",
      "public func greater(x : Int32, y : Int32) : Bool",
      "public func greaterOrEqual(x : Int32, y : Int32) : Bool",
      "public func less(x : Int32, y : Int32) : Bool",
      "public func lessOrEqual(x : Int32, y : Int32) : Bool",
      "public func max(x : Int32, y : Int32) : Int32",
      "public let maxValue : Int32",
      "public func min(x : Int32, y : Int32) : Int32",
      "public let minValue : Int32",
      "public func mul(x : Int32, y : Int32) : Int32",
      "public func mulWrap(x : Int32, y : Int32) : Int32",
      "public func neg(x : Int32) : Int32",
      "public func notEqual(x : Int32, y : Int32) : Bool",
      "public func pow(x : Int32, y : Int32) : Int32",
      "public func powWrap(x : Int32, y : Int32) : Int32",
      "public func range(fromInclusive : Int32, toExclusive : Int32) : Iter.Iter<Int32>",
      "public func rangeInclusive(from : Int32, to : Int32) : Iter.Iter<Int32>",
      "public func rem(x : Int32, y : Int32) : Int32",
      "public func sub(x : Int32, y : Int32) : Int32",
      "public func subWrap(x : Int32, y : Int32) : Int32",
      "public let toInt : Int32 -> Int",
      "public let toInt16 : Int32 -> Int16",
      "public let toInt64 : Int32 -> Int64",
      "public let toNat32 : Int32 -> Nat32",
      "public func toText(x : Int32) : Text"
    ]
  },
  {
    "name": "Int64",
    "exports": [
      "public func abs(x : Int64) : Int64",
      "public func add(x : Int64, y : Int64) : Int64",
      "public func addWrap(x : Int64, y : Int64) : Int64",
      "public func allValues() : Iter.Iter<Int64>",
      "public func bitand(x : Int64, y : Int64) : Int64",
      "public func bitclear(x : Int64, p : Nat) : Int64",
      "public let bitcountLeadingZero : (x : Int64) -> Int64",
      "public let bitcountNonZero : (x : Int64) -> Int64",
      "public let bitcountTrailingZero : (x : Int64) -> Int64",
      "public func bitflip(x : Int64, p : Nat) : Int64",
      "public func bitnot(x : Int64) : Int64",
      "public func bitor(x : Int64, y : Int64) : Int64",
      "public func bitrotLeft(x : Int64, y : Int64) : Int64",
      "public func bitrotRight(x : Int64, y : Int64) : Int64",
      "public func bitset(x : Int64, p : Nat) : Int64",
      "public func bitshiftLeft(x : Int64, y : Int64) : Int64",
      "public func bitshiftRight(x : Int64, y : Int64) : Int64",
      "public func bittest(x : Int64, p : Nat) : Bool",
      "public func bitxor(x : Int64, y : Int64) : Int64",
      "public func compare(x : Int64, y : Int64) : { #less; #equal; #greater }",
      "public func div(x : Int64, y : Int64) : Int64",
      "public func equal(x : Int64, y : Int64) : Bool",
      "public let fromInt : Int -> Int64",
      "public let fromInt32 : Int32 -> Int64",
      "public let fromIntWrap : Int -> Int64",
      "public let fromNat64 : Nat64 -> Int64",
      "public func greater(x : Int64, y : Int64) : Bool",
      "public func greaterOrEqual(x : Int64, y : Int64) : Bool",
      "public func less(x : Int64, y : Int64) : Bool",
      "public func lessOrEqual(x : Int64, y : Int64) : Bool",
      "public func max(x : Int64, y : Int64) : Int64",
      "public let maxValue : Int64",
      "public func min(x : Int64, y : Int64) : Int64",
      "public let minValue : Int64",
      "public func mul(x : Int64, y : Int64) : Int64",
      "public func mulWrap(x : Int64, y : Int64) : Int64",
      "public func neg(x : Int64) : Int64",
      "public func notEqual(x : Int64, y : Int64) : Bool",
      "public func pow(x : Int64, y : Int64) : Int64",
      "public func powWrap(x : Int64, y : Int64) : Int64",
      "public func range(fromInclusive : Int64, toExclusive : Int64) : Iter.Iter<Int64>",
      "public func rangeInclusive(from : Int64, to : Int64) : Iter.Iter<Int64>",
      "public func rem(x : Int64, y : Int64) : Int64",
      "public func sub(x : Int64, y : Int64) : Int64",
      "public func subWrap(x : Int64, y : Int64) : Int64",
      "public let toInt : Int64 -> Int",
      "public let toInt32 : Int64 -> Int32",
      "public let toNat64 : Int64 -> Nat64",
      "public func toText(x : Int64) : Text"
    ]
  },
  {
    "name": "Int8",
    "exports": [
      "public func abs(x : Int8) : Int8",
      "public func add(x : Int8, y : Int8) : Int8",
      "public func addWrap(x : Int8, y : Int8) : Int8",
      "public func allValues() : Iter.Iter<Int8>",
      "public func bitand(x : Int8, y : Int8) : Int8",
      "public func bitclear(x : Int8, p : Nat) : Int8",
      "public let bitcountLeadingZero : (x : Int8) -> Int8",
      "public let bitcountNonZero : (x : Int8) -> Int8",
      "public let bitcountTrailingZero : (x : Int8) -> Int8",
      "public func bitflip(x : Int8, p : Nat) : Int8",
      "public func bitnot(x : Int8) : Int8",
      "public func bitor(x : Int8, y : Int8) : Int8",
      "public func bitrotLeft(x : Int8, y : Int8) : Int8",
      "public func bitrotRight(x : Int8, y : Int8) : Int8",
      "public func bitset(x : Int8, p : Nat) : Int8",
      "public func bitshiftLeft(x : Int8, y : Int8) : Int8",
      "public func bitshiftRight(x : Int8, y : Int8) : Int8",
      "public func bittest(x : Int8, p : Nat) : Bool",
      "public func bitxor(x : Int8, y : Int8) : Int8",
      "public func compare(x : Int8, y : Int8) : { #less; #equal; #greater }",
      "public func div(x : Int8, y : Int8) : Int8",
      "public func equal(x : Int8, y : Int8) : Bool",
      "public let fromInt : Int -> Int8",
      "public let fromInt16 : Int16 -> Int8",
      "public let fromIntWrap : Int -> Int8",
      "public let fromNat8 : Nat8 -> Int8",
      "public func greater(x : Int8, y : Int8) : Bool",
      "public func greaterOrEqual(x : Int8, y : Int8) : Bool",
      "public func less(x : Int8, y : Int8) : Bool",
      "public func lessOrEqual(x : Int8, y : Int8) : Bool",
      "public func max(x : Int8, y : Int8) : Int8",
      "public let maxValue : Int8",
      "public func min(x : Int8, y : Int8) : Int8",
      "public let minValue : Int8",
      "public func mul(x : Int8, y : Int8) : Int8",
      "public func mulWrap(x : Int8, y : Int8) : Int8",
      "public func neg(x : Int8) : Int8",
      "public func notEqual(x : Int8, y : Int8) : Bool",
      "public func pow(x : Int8, y : Int8) : Int8",
      "public func powWrap(x : Int8, y : Int8) : Int8",
      "public func range(fromInclusive : Int8, toExclusive : Int8) : Iter.Iter<Int8>",
      "public func rangeInclusive(from : Int8, to : Int8) : Iter.Iter<Int8>",
      "public func rem(x : Int8, y : Int8) : Int8",
      "public func sub(x : Int8, y : Int8) : Int8",
      "public func subWrap(x : Int8, y : Int8) : Int8",
      "public let toInt : Int8 -> Int",
      "public let toInt16 : Int8 -> Int16",
      "public let toNat8 : Int8 -> Nat8",
      "public func toText(x : Int8) : Text"
    ]
  },
  {
    "name": "InternetComputer",
    "exports": [
      "public let call : (canister : Principal, name : Text, data : Blob) -> async (reply : Blob)",
      "public func countInstructions(comp : () -> ()) : Nat64",
      "public let performanceCounter : (counter : Nat32) -> (value : Nat64)",
      "public func replyDeadline() : Nat"
    ]
  },
  {
    "name": "Iter",
    "exports": [
      "public func concat<T>(a : Iter<T>, b : Iter<T>) : Iter<T>",
      "public func empty<T>() : Iter<T>",
      "public func filter<T>(xs : Iter<T>, f : T -> Bool) : Iter<T>",
      "public func fromArray<T>(xs : [T]) : Iter<T>",
      "public func fromVarArray<T>(xs : [var T]) : Iter<T>",
      "public func infinite<T>(item : T) : Iter<T>",
      "public func iterate<T>( xs : Iter<T>, f : (T, Nat) -> () )",
      "public func map<T, R>(xs : Iter<T>, f : T -> R) : Iter<R>",
      "public func size<T>(xs : Iter<T>) : Nat",
      "public func sort<T>(xs : Iter<T>, compare : (T, T) -> Order.Order) : Iter<T>",
      "public func toArray<T>(iter : Iter<T>) : [T]",
      "public func toVarArray<T>(xs : Iter<T>) : [var T]"
    ]
  },
  {
    "name": "IterType",
    "exports": []
  },
  {
    "name": "List",
    "exports": [
      "public func add<T>(list : List<T>, item : T) : ()",
      "public func all<T>(list : List<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(list : List<T>, predicate : T -> Bool) : Bool",
      "public func binarySearch<T>(list : List<T>, compare : (T, T) -> Order.Order, element : T) : ?Nat",
      "public func chunk<T>(list : List<T>, size : Nat) : List<List<T>>",
      "public func clear<T>(list : List<T>)",
      "public func clone<T>(list : List<T>) : List<T>",
      "public func compare<T>(list1 : List<T>, list2 : List<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(list : List<T>, element : T, equal : (T, T) -> Bool) : Bool",
      "public func containsAll<T>(list : List<T>, subList : List<T>, equal : (T, T) -> Bool) : Bool",
      "public func distinct<T>(list : List<T>, equal : (T, T) -> Bool) : List<T>",
      "public func empty<T>() : List<T>",
      "public func equal<T>(list1 : List<T>, list2 : List<T>, equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(list : List<T>, predicate : T -> Bool) : List<T>",
      "public func filterMap<T1, T2>(list : List<T1>, f : T1 -> ?T2) : List<T2>",
      "public func first<T>(list : List<T>) : T",
      "public func flatMap<T1, T2>(list : List<T1>, k : T1 -> Iter.Iter<T2>) : List<T2>",
      "public func flatten<T>(lists : Iter.Iter<List<T>>) : List<T>",
      "public func foldLeft<A, T>(list : List<T>, base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(list : List<T>, base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(list : List<T>, f : T -> ())",
      "public func fromArray<T>(array : [T]) : List<T>",
      "public func fromIter<T>(iter : { next : () -> ?T }) : List<T>",
      "public func fromVarArray<T>(array : [var T]) : List<T>",
      "public func hash<T>(list : List<T>, hash : T -> Nat32) : Nat32",
      "public func indexOf<T>(list : List<T>, element : T, equal : (T, T) -> Bool) : ?Nat",
      "public func indexOfList<T>(list : List<T>, subList : List<T>, equal : (T, T) -> Bool) : ?Nat",
      "public func isEmpty<T>(list : List<T>) : Bool",
      "public func isPrefixOf<T>(list : List<T>, prefix : List<T>, equal : (T, T) -> Bool) : Bool",
      "public func isSuffixOf<T>(list : List<T>, suffix : List<T>, equal : (T, T) -> Bool) : Bool",
      "public func last<T>(list : List<T>) : T",
      "public func lastIndexOf<T>(list : List<T>, element : T, equal : (T, T) -> Bool) : ?Nat",
      "public func map<T1, T2>(list : List<T1>, f : T1 -> T2) : List<T2>",
      "public func mapEntries<T1, T2>(list : List<T1>, f : (Nat, T1) -> T2) : List<T2>",
      "public func mapResult<T, R, E>(list : List<T>, f : T -> Result.Result<R, E>) : Result.Result<List<R>, E>",
      "public func max<T>(list : List<T>, compare : (T, T) -> Order.Order) : ?T",
      "public func merge<T>(list1 : List<T>, list2 : List<T>, compare : (T, T) -> Order.Order) : List<T>",
      "public func min<T>(list : List<T>, compare : (T, T) -> Order.Order) : ?T",
      "public func partition<T>(list : List<T>, predicate : T -> Bool) : (List<T>, List<T>)",
      "public func prefix<T>(list : List<T>, length : Nat) : List<T>",
      "public func put<T>(list : List<T>, index : Nat, item : T) : ()",
      "public func removeLast<T>(list : List<T>) : ?T",
      "public func reverse<T>(list : List<T>)",
      "public func singleton<T>(element : T) : List<T>",
      "public func size<T>(list : List<T>) : Bool",
      "public func split<T>(list : List<T>, index : Nat) : (List<T>, List<T>)",
      "public func subList<T>(list : List<T>, start : Nat, length : Nat) : List<T>",
      "public func suffix<T>(list : List<T>, length : Nat) : List<T>",
      "public func toArray<T>(list : List<T>) : [T]",
      "public func toText<T>(list : List<T>, f : T -> Text) : Text",
      "public func toVarArray<T>(list : List<T>) : [var T]",
      "public func values<T>(list : List<T>) : Iter.Iter<T>",
      "public func zip<T1, T2>(list1 : List<T1>, list2 : List<T2>) : List<(T1, T2)>",
      "public func zipWith<T1, T2, Z>(list1 : List<T1>, list2 : List<T2>, zip : (T1, T2) -> Z) : List<Z>"
    ]
  },
  {
    "name": "Map",
    "exports": [
      "public func add<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : ()",
      "public func all<K, V>(map : Map<K, V>, predicate : (K, V) -> Bool) : Bool",
      "public func any<K, V>(map : Map<K, V>, predicate : (K, V) -> Bool) : Bool",
      "public func assertValid<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order) : ()",
      "public func clear<K, V>(map : Map<K, V>) : ()",
      "public func clone<K, V>(map : Map<K, V>) : Map<K, V>",
      "public func compare<K, V>(map1 : Map<K, V>, map2 : Map<K, V>, compareKey : (K, K) -> Order.Order, compareValue : (V, V) -> Order.Order) : Order.Order",
      "public func containsKey<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : Bool",
      "public func delete<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : ()",
      "public func empty<K, V>() : Map<K, V>",
      "public func entries<K, V>(map : Map<K, V>) : IterType.Iter<(K, V)>",
      "public func equal<K, V>(map1 : Map<K, V>, map2 : Map<K, V>, compare : (K, K) -> Order.Order, equal : (V, V) -> Bool) : Bool",
      "public func filter<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, criterion : (K, V) -> Bool) : Map<K, V>",
      "public func filterMap<K, V1, V2>(map : Map<K, V1>, compare : (K, K) -> Order.Order, project : (K, V1) -> ?V2) : Map<K, V2>",
      "public func foldLeft<K, V, A>( map : Map<K, V>, base : A, combine : (A, K, V) -> A ) : A",
      "public func foldRight<K, V, A>( map : Map<K, V>, base : A, combine : (K, V, A) -> A ) : A",
      "public func forEach<K, V>(map : Map<K, V>, operation : (K, V) -> ())",
      "public func fromIter<K, V>(iter : IterType.Iter<(K, V)>, compare : (K, K) -> Order.Order) : Map<K, V>",
      "public func get<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : ?V",
      "public func isEmpty<K, V>(map : Map<K, V>) : Bool",
      "public func keys<K, V>(map : Map<K, V>) : IterType.Iter<K>",
      "public func map<K, V1, V2>(map : Map<K, V1>, compare : (K, K) -> Order.Order, project : (K, V1) -> V2) : Map<K, V2>",
      "public func maxEntry<K, V>(map : Map<K, V>) : ?(K, V)",
      "public func minEntry<K, V>(map : Map<K, V>) : ?(K, V)",
      "public func put<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : ?V",
      "public func replaceIfExists<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : ?V",
      "public func reverseEntries<K, V>(map : Map<K, V>) : IterType.Iter<(K, V)>",
      "public func singleton<K, V>(key : K, value : V) : Map<K, V>",
      "public func size<K, V>(map : Map<K, V>) : Nat",
      "public func toText<K, V>(map : Map<K, V>, keyFormat : K -> Text, valueFormat : V -> Text) : Text",
      "public func values<K, V>(map : Map<K, V>) : IterType.Iter<V>"
    ]
  },
  {
    "name": "Nat",
    "exports": [
      "public func add(x : Nat, y : Nat) : Nat",
      "public func allValues() : Iter.Iter<Nat>",
      "public func bitshiftLeft(x : Nat, y : Nat32) : Nat",
      "public func bitshiftRight(x : Nat, y : Nat32) : Nat",
      "public func compare(x : Nat, y : Nat) : { #less; #equal; #greater }",
      "public func div(x : Nat, y : Nat) : Nat",
      "public func equal(x : Nat, y : Nat) : Bool",
      "public func fromText(text : Text) : ?Nat",
      "public func greater(x : Nat, y : Nat) : Bool",
      "public func greaterOrEqual(x : Nat, y : Nat) : Bool",
      "public func less(x : Nat, y : Nat) : Bool",
      "public func lessOrEqual(x : Nat, y : Nat) : Bool",
      "public func max(x : Nat, y : Nat) : Nat",
      "public func min(x : Nat, y : Nat) : Nat",
      "public func mul(x : Nat, y : Nat) : Nat",
      "public func notEqual(x : Nat, y : Nat) : Bool",
      "public func pow(x : Nat, y : Nat) : Nat",
      "public func range(fromInclusive : Nat, toExclusive : Nat) : Iter.Iter<Nat>",
      "public func rangeInclusive(from : Nat, to : Nat) : Iter.Iter<Nat>",
      "public func rem(x : Nat, y : Nat) : Nat",
      "public func sub(x : Nat, y : Nat) : Nat",
      "public func toText(n : Nat) : Text"
    ]
  },
  {
    "name": "Nat16",
    "exports": [
      "public func add(x : Nat16, y : Nat16) : Nat16",
      "public func addWrap(x : Nat16, y : Nat16) : Nat16",
      "public func allValues() : Iter.Iter<Nat16>",
      "public func bitand(x : Nat16, y : Nat16) : Nat16",
      "public func bitclear(x : Nat16, p : Nat) : Nat16",
      "public let bitcountLeadingZero : (x : Nat16) -> Nat16",
      "public let bitcountNonZero : (x : Nat16) -> Nat16",
      "public let bitcountTrailingZero : (x : Nat16) -> Nat16",
      "public func bitflip(x : Nat16, p : Nat) : Nat16",
      "public func bitnot(x : Nat16) : Nat16",
      "public func bitor(x : Nat16, y : Nat16) : Nat16",
      "public func bitrotLeft(x : Nat16, y : Nat16) : Nat16",
      "public func bitrotRight(x : Nat16, y : Nat16) : Nat16",
      "public func bitset(x : Nat16, p : Nat) : Nat16",
      "public func bitshiftLeft(x : Nat16, y : Nat16) : Nat16",
      "public func bitshiftRight(x : Nat16, y : Nat16) : Nat16",
      "public func bittest(x : Nat16, p : Nat) : Bool",
      "public func bitxor(x : Nat16, y : Nat16) : Nat16",
      "public func compare(x : Nat16, y : Nat16) : { #less; #equal; #greater }",
      "public func div(x : Nat16, y : Nat16) : Nat16",
      "public func equal(x : Nat16, y : Nat16) : Bool",
      "public let fromIntWrap : Int -> Nat16",
      "public let fromNat : Nat -> Nat16",
      "public func fromNat32(x : Nat32) : Nat16",
      "public func fromNat8(x : Nat8) : Nat16",
      "public func greater(x : Nat16, y : Nat16) : Bool",
      "public func greaterOrEqual(x : Nat16, y : Nat16) : Bool",
      "public func less(x : Nat16, y : Nat16) : Bool",
      "public func lessOrEqual(x : Nat16, y : Nat16) : Bool",
      "public func max(x : Nat16, y : Nat16) : Nat16",
      "public let maxValue : Nat16",
      "public func min(x : Nat16, y : Nat16) : Nat16",
      "public func mul(x : Nat16, y : Nat16) : Nat16",
      "public func mulWrap(x : Nat16, y : Nat16) : Nat16",
      "public func notEqual(x : Nat16, y : Nat16) : Bool",
      "public func pow(x : Nat16, y : Nat16) : Nat16",
      "public func powWrap(x : Nat16, y : Nat16) : Nat16",
      "public func range(fromInclusive : Nat16, toExclusive : Nat16) : Iter.Iter<Nat16>",
      "public func rangeInclusive(from : Nat16, to : Nat16) : Iter.Iter<Nat16>",
      "public func rem(x : Nat16, y : Nat16) : Nat16",
      "public func sub(x : Nat16, y : Nat16) : Nat16",
      "public func subWrap(x : Nat16, y : Nat16) : Nat16",
      "public let toNat : Nat16 -> Nat",
      "public func toNat32(x : Nat16) : Nat32",
      "public func toNat8(x : Nat16) : Nat8",
      "public func toText(x : Nat16) : Text"
    ]
  },
  {
    "name": "Nat32",
    "exports": [
      "public func add(x : Nat32, y : Nat32) : Nat32",
      "public func addWrap(x : Nat32, y : Nat32) : Nat32",
      "public func allValues() : Iter.Iter<Nat32>",
      "public func bitand(x : Nat32, y : Nat32) : Nat32",
      "public func bitclear(x : Nat32, p : Nat) : Nat32",
      "public let bitcountLeadingZero : (x : Nat32) -> Nat32",
      "public let bitcountNonZero : (x : Nat32) -> Nat32",
      "public let bitcountTrailingZero : (x : Nat32) -> Nat32",
      "public func bitflip(x : Nat32, p : Nat) : Nat32",
      "public func bitnot(x : Nat32) : Nat32",
      "public func bitor(x : Nat32, y : Nat32) : Nat32",
      "public func bitrotLeft(x : Nat32, y : Nat32) : Nat32",
      "public func bitrotRight(x : Nat32, y : Nat32) : Nat32",
      "public func bitset(x : Nat32, p : Nat) : Nat32",
      "public func bitshiftLeft(x : Nat32, y : Nat32) : Nat32",
      "public func bitshiftRight(x : Nat32, y : Nat32) : Nat32",
      "public func bittest(x : Nat32, p : Nat) : Bool",
      "public func bitxor(x : Nat32, y : Nat32) : Nat32",
      "public func compare(x : Nat32, y : Nat32) : { #less; #equal; #greater }",
      "public func div(x : Nat32, y : Nat32) : Nat32",
      "public func equal(x : Nat32, y : Nat32) : Bool",
      "public let fromIntWrap : Int -> Nat32",
      "public let fromNat : Nat -> Nat32",
      "public func fromNat16(x : Nat16) : Nat32",
      "public func fromNat64(x : Nat64) : Nat32",
      "public func greater(x : Nat32, y : Nat32) : Bool",
      "public func greaterOrEqual(x : Nat32, y : Nat32) : Bool",
      "public func less(x : Nat32, y : Nat32) : Bool",
      "public func lessOrEqual(x : Nat32, y : Nat32) : Bool",
      "public func max(x : Nat32, y : Nat32) : Nat32",
      "public let maxValue : Nat32",
      "public func min(x : Nat32, y : Nat32) : Nat32",
      "public func mul(x : Nat32, y : Nat32) : Nat32",
      "public func mulWrap(x : Nat32, y : Nat32) : Nat32",
      "public func notEqual(x : Nat32, y : Nat32) : Bool",
      "public func pow(x : Nat32, y : Nat32) : Nat32",
      "public func powWrap(x : Nat32, y : Nat32) : Nat32",
      "public func range(fromInclusive : Nat32, toExclusive : Nat32) : Iter.Iter<Nat32>",
      "public func rangeInclusive(from : Nat32, to : Nat32) : Iter.Iter<Nat32>",
      "public func rem(x : Nat32, y : Nat32) : Nat32",
      "public func sub(x : Nat32, y : Nat32) : Nat32",
      "public func subWrap(x : Nat32, y : Nat32) : Nat32",
      "public let toNat : Nat32 -> Nat",
      "public func toNat16(x : Nat32) : Nat16",
      "public func toNat64(x : Nat32) : Nat64",
      "public func toText(x : Nat32) : Text"
    ]
  },
  {
    "name": "Nat64",
    "exports": [
      "public func add(x : Nat64, y : Nat64) : Nat64",
      "public func addWrap(x : Nat64, y : Nat64) : Nat64",
      "public func allValues() : Iter.Iter<Nat64>",
      "public func bitand(x : Nat64, y : Nat64) : Nat64",
      "public func bitclear(x : Nat64, p : Nat) : Nat64",
      "public let bitcountLeadingZero : (x : Nat64) -> Nat64",
      "public let bitcountNonZero : (x : Nat64) -> Nat64",
      "public let bitcountTrailingZero : (x : Nat64) -> Nat64",
      "public func bitflip(x : Nat64, p : Nat) : Nat64",
      "public func bitnot(x : Nat64) : Nat64",
      "public func bitor(x : Nat64, y : Nat64) : Nat64",
      "public func bitrotLeft(x : Nat64, y : Nat64) : Nat64",
      "public func bitrotRight(x : Nat64, y : Nat64) : Nat64",
      "public func bitset(x : Nat64, p : Nat) : Nat64",
      "public func bitshiftLeft(x : Nat64, y : Nat64) : Nat64",
      "public func bitshiftRight(x : Nat64, y : Nat64) : Nat64",
      "public func bittest(x : Nat64, p : Nat) : Bool",
      "public func bitxor(x : Nat64, y : Nat64) : Nat64",
      "public func compare(x : Nat64, y : Nat64) : { #less; #equal; #greater }",
      "public func div(x : Nat64, y : Nat64) : Nat64",
      "public func equal(x : Nat64, y : Nat64) : Bool",
      "public let fromIntWrap : Int -> Nat64",
      "public let fromNat : Nat -> Nat64",
      "public func fromNat32(x : Nat32) : Nat64",
      "public func greater(x : Nat64, y : Nat64) : Bool",
      "public func greaterOrEqual(x : Nat64, y : Nat64) : Bool",
      "public func less(x : Nat64, y : Nat64) : Bool",
      "public func lessOrEqual(x : Nat64, y : Nat64) : Bool",
      "public func max(x : Nat64, y : Nat64) : Nat64",
      "public let maxValue : Nat64",
      "public func min(x : Nat64, y : Nat64) : Nat64",
      "public func mul(x : Nat64, y : Nat64) : Nat64",
      "public func mulWrap(x : Nat64, y : Nat64) : Nat64",
      "public func notEqual(x : Nat64, y : Nat64) : Bool",
      "public func pow(x : Nat64, y : Nat64) : Nat64",
      "public func powWrap(x : Nat64, y : Nat64) : Nat64",
      "public func range(fromInclusive : Nat64, toExclusive : Nat64) : Iter.Iter<Nat64>",
      "public func rangeInclusive(from : Nat64, to : Nat64) : Iter.Iter<Nat64>",
      "public func rem(x : Nat64, y : Nat64) : Nat64",
      "public func sub(x : Nat64, y : Nat64) : Nat64",
      "public func subWrap(x : Nat64, y : Nat64) : Nat64",
      "public let toNat : Nat64 -> Nat",
      "public func toNat32(x : Nat64) : Nat32",
      "public func toText(x : Nat64) : Text"
    ]
  },
  {
    "name": "Nat8",
    "exports": [
      "public func add(x : Nat8, y : Nat8) : Nat8",
      "public func addWrap(x : Nat8, y : Nat8) : Nat8",
      "public func allValues() : Iter.Iter<Nat8>",
      "public func bitand(x : Nat8, y : Nat8) : Nat8",
      "public func bitclear(x : Nat8, p : Nat) : Nat8",
      "public let bitcountLeadingZero : (x : Nat8) -> Nat8",
      "public let bitcountNonZero : (x : Nat8) -> Nat8",
      "public let bitcountTrailingZero : (x : Nat8) -> Nat8",
      "public func bitflip(x : Nat8, p : Nat) : Nat8",
      "public func bitnot(x : Nat8) : Nat8",
      "public func bitor(x : Nat8, y : Nat8) : Nat8",
      "public func bitrotLeft(x : Nat8, y : Nat8) : Nat8",
      "public func bitrotRight(x : Nat8, y : Nat8) : Nat8",
      "public func bitset(x : Nat8, p : Nat) : Nat8",
      "public func bitshiftLeft(x : Nat8, y : Nat8) : Nat8",
      "public func bitshiftRight(x : Nat8, y : Nat8) : Nat8",
      "public func bittest(x : Nat8, p : Nat) : Bool",
      "public func bitxor(x : Nat8, y : Nat8) : Nat8",
      "public func compare(x : Nat8, y : Nat8) : { #less; #equal; #greater }",
      "public func div(x : Nat8, y : Nat8) : Nat8",
      "public func equal(x : Nat8, y : Nat8) : Bool",
      "public let fromIntWrap : Int -> Nat8",
      "public let fromNat : Nat -> Nat8",
      "public let fromNat16 : Nat16 -> Nat8",
      "public func greater(x : Nat8, y : Nat8) : Bool",
      "public func greaterOrEqual(x : Nat8, y : Nat8) : Bool",
      "public func less(x : Nat8, y : Nat8) : Bool",
      "public func lessOrEqual(x : Nat8, y : Nat8) : Bool",
      "public func max(x : Nat8, y : Nat8) : Nat8",
      "public let maxValue : Nat8",
      "public func min(x : Nat8, y : Nat8) : Nat8",
      "public func mul(x : Nat8, y : Nat8) : Nat8",
      "public func mulWrap(x : Nat8, y : Nat8) : Nat8",
      "public func notEqual(x : Nat8, y : Nat8) : Bool",
      "public func pow(x : Nat8, y : Nat8) : Nat8",
      "public func powWrap(x : Nat8, y : Nat8) : Nat8",
      "public func range(fromInclusive : Nat8, toExclusive : Nat8) : Iter.Iter<Nat8>",
      "public func rangeInclusive(from : Nat8, to : Nat8) : Iter.Iter<Nat8>",
      "public func rem(x : Nat8, y : Nat8) : Nat8",
      "public func sub(x : Nat8, y : Nat8) : Nat8",
      "public func subWrap(x : Nat8, y : Nat8) : Nat8",
      "public let toNat : Nat8 -> Nat",
      "public let toNat16 : Nat8 -> Nat16",
      "public func toText(x : Nat8) : Text"
    ]
  },
  {
    "name": "Option",
    "exports": [
      "public func apply<A, B>(x : ?A, f : ?(A -> B)) : ?B",
      "public func chain<A, B>(x : ?A, f : A -> ?B) : ?B",
      "public func equal<A>(x : ?A, y : ?A, eq : (A, A) -> Bool) : Bool",
      "public func flatten<A>(x : ??A) : ?A",
      "public func forEach<A>(x : ?A, f : A -> ())",
      "public func get<T>(x : ?T, default : T) : T",
      "public func getMapped<A, B>(x : ?A, f : A -> B, default : B) : B",
      "public func isNull(x : ?Any) : Bool",
      "public func isSome(x : ?Any) : Bool",
      "public func map<A, B>(x : ?A, f : A -> B) : ?B",
      "public func some<A>(x : A) : ?A",
      "public func unwrap<T>(x : ?T) : T"
    ]
  },
  {
    "name": "Order",
    "exports": [
      "public func allValues() : Iter.Iter<Order>",
      "public func equal(order1 : Order, order2 : Order) : Bool",
      "public func isEqual(order : Order) : Bool",
      "public func isGreater(order : Order) : Bool",
      "public func isLess(order : Order) : Bool"
    ]
  },
  {
    "name": "Principal",
    "exports": [
      "public func anonymous() : Principal",
      "public func compare(principal1 : Principal, principal2 : Principal) : { #less; #equal; #greater }",
      "public func equal(principal1 : Principal, principal2 : Principal) : Bool",
      "public func fromActor(a : actor",
      "public func fromBlob(b : Blob) : Principal",
      "public func fromText(t : Text) : Principal",
      "public func greater(principal1 : Principal, principal2 : Principal) : Bool",
      "public func greaterOrEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public func hash(principal : Principal) : Hash.Hash",
      "public func isAnonymous(p : Principal) : Bool",
      "public func isController(p : Principal) : Bool",
      "public func less(principal1 : Principal, principal2 : Principal) : Bool",
      "public func lessOrEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public func notEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public func toBlob(p : Principal) : Blob",
      "public func toLedgerAccount(principal : Principal, subAccount : ?Blob) : Blob",
      "public func toText(p : Principal) : Text"
    ]
  },
  {
    "name": "Queue",
    "exports": [
      "public func all<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func clear<T>(queue : Queue<T>)",
      "public func clone<T>(queue : Queue<T>) : Queue<T>",
      "public func compare<T>(queue1 : Queue<T>, queue2 : Queue<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(queue : Queue<T>, item : T) : Bool",
      "public func empty<T>() : Queue<T>",
      "public func equal<T>(queue1 : Queue<T>, queue2 : Queue<T>) : Bool",
      "public func filter<T>(queue : Queue<T>, f : T -> Bool) : Queue<T>",
      "public func filterMap<T, U>(queue : Queue<T>, f : T -> ?U) : Queue<U>",
      "public func forEach<T>(queue : Queue<T>, f : T -> ())",
      "public func freeze<T>(queue : Queue<T>) : Immutable.Queue<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>) : Queue<T>",
      "public func isEmpty<T>(queue : Queue<T>) : Bool",
      "public func map<T1, T2>(queue : Queue<T1>, f : T1 -> T2) : Queue<T2>",
      "public func peekBack<T>(queue : Queue<T>) : ?T",
      "public func peekFront<T>(queue : Queue<T>) : ?T",
      "public func pop<T>(queue : Queue<T>) : ?T",
      "public func popBack<T>(queue : Queue<T>) : ?T",
      "public func popFront<T>(queue : Queue<T>) : ?T",
      "public func push<T>(queue : Queue<T>, element : T) : ()",
      "public func pushBack<T>(queue : Queue<T>, element : T) : ()",
      "public func pushFront<T>(queue : Queue<T>, element : T) : ()",
      "public func singleton<T>(item : T) : Queue<T>",
      "public func size<T>(queue : Queue<T>) : Nat",
      "public func thaw<T>(queue : Immutable.Queue<T>) : Queue<T>",
      "public func toText<T>(queue : Queue<T>, f : T -> Text) : Text",
      "public func values<T>(queue : Queue<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "Random",
    "exports": [
      "public class AsyncRandom(generator : () -> async* Blob)",
      "public let blob : shared () -> async Blob",
      "public func new(seed : Blob) : Random",
      "public func newAsync() : AsyncRandom",
      "public class Random(generator : () -> Blob)"
    ]
  },
  {
    "name": "Region",
    "exports": [
      "public let grow : (region : Region, newPages : Nat64) -> (oldPages : Nat64)",
      "public let id : Region -> Nat",
      "public let loadBlob : (region : Region, offset : Nat64, size : Nat) -> Blob",
      "public let loadFloat : (region : Region, offset : Nat64) -> Float",
      "public let loadInt16 : (region : Region, offset : Nat64) -> Int16",
      "public let loadInt32 : (region : Region, offset : Nat64) -> Int32",
      "public let loadInt64 : (region : Region, offset : Nat64) -> Int64",
      "public let loadInt8 : (region : Region, offset : Nat64) -> Int8",
      "public let loadNat16 : (region : Region, offset : Nat64) -> Nat16",
      "public let loadNat32 : (region : Region, offset : Nat64) -> Nat32",
      "public let loadNat64 : (region : Region, offset : Nat64) -> Nat64",
      "public let loadNat8 : (region : Region, offset : Nat64) -> Nat8",
      "public let new : () -> Region",
      "public let size : (region : Region) -> (pages : Nat64)",
      "public let storeBlob : (region : Region, offset : Nat64, value : Blob) -> ()",
      "public let storeFloat : (region: Region, offset : Nat64, value : Float) -> ()",
      "public let storeInt16 : (region : Region, offset : Nat64, value : Int16) -> ()",
      "public let storeInt32 : (region : Region, offset : Nat64, value : Int32) -> ()",
      "public let storeInt64 : (region : Region, offset : Nat64, value : Int64) -> ()",
      "public let storeInt8 : (region : Region, offset : Nat64, value : Int8) -> ()",
      "public let storeNat16 : (region : Region, offset : Nat64, value : Nat16) -> ()",
      "public let storeNat32 : (region : Region, offset : Nat64, value : Nat32) -> ()",
      "public let storeNat64 : (region : Region, offset : Nat64, value : Nat64) -> ()",
      "public let storeNat8 : (region : Region, offset : Nat64, value : Nat8) -> ()"
    ]
  },
  {
    "name": "Result",
    "exports": [
      "public func assertErr(result : Result<Any, Any>)",
      "public func assertOk(result : Result<Any, Any>)",
      "public func chain<Ok1, Ok2, Err>( result : Result<Ok1, Err>, f : Ok1 -> Result<Ok2, Err> ) : Result<Ok2, Err>",
      "public func compare<Ok, Err>( compareOk : (Ok, Ok) -> Order.Order, compareErr : (Err, Err) -> Order.Order, result1 : Result<Ok, Err>, result2 : Result<Ok, Err> ) : Order.Order",
      "public func equal<Ok, Err>( eqOk : (Ok, Ok) -> Bool, eqErr : (Err, Err) -> Bool, r1 : Result<Ok, Err>, r2 : Result<Ok, Err> ) : Bool",
      "public func flatten<Ok, Err>( result : Result<Result<Ok, Err>, Err> ) : Result<Ok, Err>",
      "public func fromOption<Ok, Err>(x : ?Ok, err : Err) : Result<Ok, Err>",
      "public func fromUpper<Ok, Err>( result : { #Ok : Ok; #Err : Err } ) : Result<Ok, Err>",
      "public func isErr(result : Result<Any, Any>) : Bool",
      "public func isOk(result : Result<Any, Any>) : Bool",
      "public func iterate<Ok, Err>(result : Result<Ok, Err>, f : Ok -> ())",
      "public func mapErr<Ok, Err1, Err2>( result : Result<Ok, Err1>, f : Err1 -> Err2 ) : Result<Ok, Err2>",
      "public func mapOk<Ok1, Ok2, Err>( result : Result<Ok1, Err>, f : Ok1 -> Ok2 ) : Result<Ok2, Err>",
      "public func toOption<Ok, Err>(result : Result<Ok, Err>) : ?Ok",
      "public func toUpper<Ok, Err>( result : Result<Ok, Err> ) : { #Ok : Ok; #Err : Err }"
    ]
  },
  {
    "name": "Runtime",
    "exports": [
      "public func trap(errorMessage : Text) : None",
      "public func unreachable() : None"
    ]
  },
  {
    "name": "Set",
    "exports": [
      "public func add<T>(set : Set<T>, compare : (T, T) -> Order.Order, item : T) : ()",
      "public func all<T>(set : Set<T>, pred : T -> Bool) : Bool",
      "public func any<T>(set : Set<T>, pred : T -> Bool) : Bool",
      "public func assertValid<T>(set : Set<T>, compare : (T, T) -> Order.Order) : ()",
      "public func clear<T>(set : Set<T>)",
      "public func clone<T>(set : Set<T>) : Set<T>",
      "public func compare<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(set : Set<T>, compare : (T, T) -> Order.Order, item : T) : Bool",
      "public func delete<T>(set : Set<T>, compare : (T, T) -> Order.Order, item : T) : Bool",
      "public func diff<T>(set1 : Set<T>, set2 : Set<T>) : Set<T>",
      "public func empty<T>() : Set<T>",
      "public func equal<T>(set1 : Set<T>, set2 : Set<T>, equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(set : Set<T>, compare : (T, T) -> Order.Order, f : T -> Bool) : Set<T>",
      "public func filterMap<T1, T2>(set : Set<T1>, compare : (T2, T2) -> Order.Order, f : T1 -> ?T2) : Set<T2>",
      "public func flatten<T>(set : Iter.Iter<Set<T>>) : Set<T>",
      "public func foldLeft<T, A>( set : Set<T>, base : A, combine : (A, T) -> A ) : A",
      "public func foldRight<T, A>( set : Set<T>, base : A, combine : (A, T) -> A ) : A",
      "public func forEach<T>(set : Set<T>, f : T -> ())",
      "public func freeze<T>(set : Set<T>, compare : (T, T) -> Order.Order) : Immutable.Set<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func intersect<T>(set1 : Set<T>, set2 : Set<T>) : Set<T>",
      "public func isEmpty<T>(set : Set<T>) : Bool",
      "public func isSubset<T>(set1 : Set<T>, set2 : Set<T>) : Bool",
      "public func map<T1, T2>(set : Set<T1>, compare : (T2, T2) -> Order.Order, f : T1 -> T2) : Set<T2>",
      "public func max<T>(set : Set<T>) : ?T",
      "public func min<T>(set : Set<T>) : ?T",
      "public func reverseValues<T>(set : Set<T>) : Iter.Iter<T>",
      "public func singleton<T>() : Set<T>",
      "public func size<T>(set : Set<T>) : Nat",
      "public func thaw<T>(set : Immutable.Set<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func toText<T>(set : Set<T>, f : T -> Text) : Text",
      "public func union<T>(set1 : Set<T>, set2 : Set<T>) : Set<T>",
      "public func values<T>(set : Set<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "Stack",
    "exports": [
      "public func all<T>(stack : Stack<T>, f : T -> Bool) : Bool",
      "public func any<T>(stack : Stack<T>, f : T -> Bool) : Bool",
      "public func chunks<T>(stack : Stack<T>, n : Nat) : Stack<Stack<T>>",
      "public func clear<T>(stack : Stack<T>)",
      "public func clone<T>(stack : Stack<T>) : Stack<T>",
      "public func compare<T>(stack1 : Stack<T>, stack2 : Stack<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func concat<T>(stack1 : Stack<T>, stack2 : Stack<T>) : Stack<T>",
      "public func contains<T>(stack : Stack<T>, item : T) : Bool",
      "public func drop<T>(stack : Stack<T>, n : Nat) : Stack<T>",
      "public func empty<T>() : Stack<T>",
      "public func equal<T>(stack1 : Stack<T>, stack2 : Stack<T>) : Bool",
      "public func filter<T>(stack : Stack<T>, f : T -> Bool) : Stack<T>",
      "public func filterMap<T, U>(stack : Stack<T>, f : T -> ?U) : Stack<U>",
      "public func find<T>(stack : Stack<T>, f : T -> Bool) : ?T",
      "public func foldLeft<T, A>(stack : Stack<T>, base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(stack : Stack<T>, base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(stack : Stack<T>, f : T -> ())",
      "public func freeze<T>(stack : Stack<T>) : Immutable.Stack<T>",
      "public func fromIter<T>(iter : IterType.Iter<T>) : Stack<T>",
      "public func generate<T>(n : Nat, f : Nat -> T) : Stack<T>",
      "public func get<T>(stack : Stack<T>, n : Nat) : ?T",
      "public func isEmpty<T>(stack : Stack<T>) : Bool",
      "public func map<T1, T2>(stack : Stack<T1>, f : T1 -> T2) : Stack<T2>",
      "public func merge<T>(stack1 : Stack<T>, stack2 : Stack<T>, lessThanOrEqual : (T, T) -> Bool) : Stack<T>",
      "public func partition<T>(stack : Stack<T>, f : T -> Bool) : (Stack<T>, Stack<T>)",
      "public func peek<T>(stack : Stack<T>) : ?T",
      "public func pop<T>(stack : Stack<T>) : ?T",
      "public func push<T>(stack : Stack<T>, value : T)",
      "public func repeat<T>(item : T, n : Nat) : Stack<T>",
      "public func reverse<T>(stack : Stack<T>) : ()",
      "public func singleton<T>(item : T) : Stack<T>",
      "public func size<T>(stack : Stack<T>) : Nat",
      "public func split<T>(stack : Stack<T>, n : Nat) : (Stack<T>, Stack<T>)",
      "public func take<T>(stack : Stack<T>, n : Nat) : Stack<T>",
      "public func thaw<T>(stack : Immutable.Stack<T>) : Stack<T>",
      "public func toText<T>(stack : Stack<T>, f : T -> Text) : Text",
      "public func values<T>(stack : Stack<T>) : IterType.Iter<T>",
      "public func zip<T, U>(stack1 : Stack<T>, stack2 : Stack<U>) : Stack<(T, U)>",
      "public func zipWith<T, U, V>(stack1 : Stack<T>, stack2 : Stack<U>, f : (T, U) -> V) : Stack<V>"
    ]
  },
  {
    "name": "Text",
    "exports": [
      "public func compare(t1 : Text, t2 : Text) : { #less; #equal; #greater }",
      "public func compareWith( t1 : Text, t2 : Text, cmp : (Char, Char) ->",
      "public func concat(t1 : Text, t2 : Text) : Text",
      "public func contains(t : Text, p : Pattern) : Bool",
      "public let decodeUtf8 : Blob -> ?Text",
      "public let encodeUtf8 : Text -> Blob",
      "public func endsWith(t : Text, p : Pattern) : Bool",
      "public func equal(t1 : Text, t2 : Text) : Bool",
      "public func flatMap(t : Text, f : Char -> Text) : Text",
      "public func fromArray(a : [Char]) : Text",
      "public let fromChar : (c : Char) -> Text",
      "public func fromIter(cs : Iter.Iter<Char>) : Text",
      "public func fromList(cs : List.List<Char>) : Text",
      "public func fromVarArray(a : [var Char]) : Text",
      "public func greater(t1 : Text, t2 : Text) : Bool",
      "public func greaterOrEqual(t1 : Text, t2 : Text) : Bool",
      "public func hash(t : Text) : Hash.Hash",
      "public func join(sep : Text, ts : Iter.Iter<Text>) : Text",
      "public func less(t1 : Text, t2 : Text) : Bool",
      "public func lessOrEqual(t1 : Text, t2 : Text) : Bool",
      "public func map(t : Text, f : Char -> Char) : Text",
      "public func notEqual(t1 : Text, t2 : Text) : Bool",
      "public func replace(t : Text, p : Pattern, r : Text) : Text",
      "public func size(t : Text) : Nat",
      "public func split(t : Text, p : Pattern) : Iter.Iter<Text>",
      "public func startsWith(t : Text, p : Pattern) : Bool",
      "public func stripEnd(t : Text, p : Pattern) : ?Text",
      "public func stripStart(t : Text, p : Pattern) : ?Text",
      "public func toArray(t : Text) : [Char]",
      "public func toIter(t : Text) : Iter.Iter<Char>",
      "public func tokens(t : Text, p : Pattern) : Iter.Iter<Text>",
      "public func toList(t : Text) : List.List<Char>",
      "public let toLower : Text -> Text",
      "public let toUpper : Text -> Text",
      "public func toVarArray(t : Text) : [var Char]",
      "public func trim(t : Text, p : Pattern) : Text",
      "public func trimEnd(t : Text, p : Pattern) : Text",
      "public func trimStart(t : Text, p : Pattern) : Text"
    ]
  },
  {
    "name": "Time",
    "exports": [
      "public let now : () -> Time",
      "public func toNanoseconds(duration : Duration) : Nat"
    ]
  },
  {
    "name": "Timer",
    "exports": [
      "public let cancelTimer : TimerId -> ()",
      "public func recurringTimer<system>(duration : Time.Duration, job : () -> async ()) : TimerId",
      "public func setTimer<system>(duration : Time.Duration, job : () -> async ()) : TimerId"
    ]
  },
  {
    "name": "VarArray",
    "exports": [
      "public func all<T>(array : [var T], predicate : T -> Bool) : Bool",
      "public func any<T>(array : [var T], predicate : T -> Bool) : Bool",
      "public func append<T>(array1 : [var T], array2 : [var T]) : [var T]",
      "public func compare<T>(array1 : [var T], array2 : [var T], compare : (T, T) -> Order.Order) : Order.Order",
      "public func empty<T>() : [var T]",
      "public func equal<T>(array1 : [var T], array2 : [var T], equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(array : [var T], f : T -> Bool) : [var T]",
      "public func filterMap<T, Y>(array : [var T], f : T -> ?Y) : [var Y]",
      "public func find<T>(array : [var T], predicate : T -> Bool) : ?T",
      "public func flatMap<T, R>(array : [var T], k : T -> [var R]) : [var R]",
      "public func flatten<T>(arrays : Iter.Iter<[var T]>) : [var T]",
      "public func foldLeft<T, A>(array : [var T], base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(array : [var T], base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(array : [var T], f : T -> ())",
      "public func fromIter<T>(iter : Iter.Iter<T>) : [var T]",
      "public func generate<T>(size : Nat, generator : Nat -> T) : [var T]",
      "public func indexOf<T>(element : T, array : [var T], equal : (T, T) -> Bool) : ?Nat",
      "public func init<T>(size : Nat, initValue : T) : [var T]",
      "public func isEmpty<T>(array : [var T]) : Bool",
      "public func keys<T>(array : [var T]) : Iter.Iter<Nat>",
      "public func lastIndexOf<T>(element : T, array : [var T], equal : (T, T) -> Bool) : ?Nat",
      "public func map<T, Y>(array : [var T], f : T -> Y) : [var Y]",
      "public func mapEntries<T, Y>(array : [var T], f : (T, Nat) -> Y) : [var Y]",
      "public func mapResult<T, Y, E>(array : [var T], f : T -> Result.Result<Y, E>) : Result.Result<[var Y], E>",
      "public func nextIndexOf<T>(element : T, array : [var T], fromInclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func prevIndexOf<T>(element : T, array : [var T], fromExclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func reverse<T>(array : [var T]) : [var T]",
      "public func reverseInPlace<T>(array : [var T]) : ()",
      "public func singleton<T>(element : T) : [var T]",
      "public func size<T>(array : [var T]) : Nat",
      "public func slice<T>(array : [var T], fromInclusive : Int, toExclusive : Int) : Iter.Iter<T>",
      "public func sort<T>(array : [var T], compare : (T, T) -> Order.Order) : [var T]",
      "public func sortInPlace<T>(array : [var T], compare : (T, T) -> Order.Order) : ()",
      "public func subArray<T>(array : [var T], start : Nat, length : Nat) : [var T]",
      "public func toText<T>(array : [var T], f : T -> Text) : Text",
      "public func values<T>(array : [var T]) : Iter.Iter<T>"
    ]
  },
  {
    "name": "deprecated/Array",
    "exports": [
      "public func append<X>(array1 : [X], array2 : [X]) : [X]",
      "public func chain<X, Y>(array : [X], k : X -> [Y]) : [Y]",
      "public func equal<X>(array1 : [X], array2 : [X], equal : (X, X) -> Bool) : Bool",
      "public func filter<X>(array : [X], predicate : X -> Bool) : [X]",
      "public func find<X>(array : [X], predicate : X -> Bool) : ?X",
      "public func flatten<X>(arrays : [[X]]) : [X]",
      "public func foldLeft<X, A>(array : [X], base : A, combine : (A, X) -> A) : A",
      "public func foldRight<X, A>(array : [X], base : A, combine : (X, A) -> A) : A",
      "public func freeze<X>(varArray : [var X]) : [X]",
      "public func indexOf<X>(element : X, array : [X], equal : (X, X) -> Bool) : ?Nat",
      "public func init<X>(size : Nat, initValue : X) : [var X]",
      "public func keys<X>(array : [X]) : I.Iter<Nat>",
      "public func lastIndexOf<X>(element : X, array : [X], equal : (X, X) -> Bool) : ?Nat",
      "public func make<X>(element : X) : [X]",
      "public func map<X, Y>(array : [X], f : X -> Y) : [Y]",
      "public func mapEntries<X, Y>(array : [X], f : (X, Nat) -> Y) : [Y]",
      "public func mapFilter<X, Y>(array : [X], f : X -> ?Y) : [Y]",
      "public func mapResult<X, Y, E>(array : [X], f : X -> Result.Result<Y, E>) : Result.Result<[Y], E>",
      "public func nextIndexOf<X>(element : X, array : [X], fromInclusive : Nat, equal : (X, X) -> Bool) : ?Nat",
      "public func prevIndexOf<T>(element : T, array : [T], fromExclusive : Nat, equal : (T, T) -> Bool) : ?Nat",
      "public func reverse<X>(array : [X]) : [X]",
      "public func size<X>(array : [X]) : Nat",
      "public func slice<X>(array : [X], fromInclusive : Nat, toExclusive : Nat) : I.Iter<X>",
      "public func sort<X>(array : [X], compare : (X, X) -> Order.Order) : [X]",
      "public func sortInPlace<X>(array : [var X], compare : (X, X) -> Order.Order)",
      "public func subArray<X>(array : [X], start : Nat, length : Nat) : [X]",
      "public func tabulate<X>(size : Nat, generator : Nat -> X) : [X]",
      "public func tabulateVar<X>(size : Nat, generator : Nat -> X) : [var X]",
      "public func take<T>(array : [T], length : Int) : [T]",
      "public func thaw<A>(array : [A]) : [var A]",
      "public func vals<X>(array : [X]) : I.Iter<X>"
    ]
  },
  {
    "name": "deprecated/AssocList",
    "exports": [
      "public func diff<K, V, W>( map1 : AssocList<K, V>, map2 : AssocList<K, W>, equal : (K, K) -> Bool ) : AssocList<K, V>",
      "public func disj<K, V, W, X>( map1 : AssocList<K, V>, map2 : AssocList<K, W>, equal : (K, K) -> Bool, combine : (?V, ?W) -> X ) : AssocList<K, X>",
      "public func disjDisjoint<K, V, W, X>( map1 : AssocList<K, V>, map2 : AssocList<K, W>, f : (?V, ?W) -> X ) : AssocList<K, X>",
      "public func find<K, V>( map : AssocList<K, V>, key : K, equal : (K, K) -> Bool ) : ?V",
      "public func fold<K, V, X>( map : AssocList<K, V>, base : X, combine : (K, V, X) -> X ) : X",
      "public func join<K, V, W, X>( map1 : AssocList<K, V>, map2 : AssocList<K, W>, equal : (K, K) -> Bool, combine : (V, W) -> X ) : AssocList<K, X>",
      "public func mapAppend<K, V, W, X>( map1 : AssocList<K, V>, map2 : AssocList<K, W>, f : (?V, ?W) -> X ) : AssocList<K, X>",
      "public func replace<K, V>( map : AssocList<K, V>, key : K, equal : (K, K) -> Bool, value : ?V ) : (AssocList<K, V>, ?V)"
    ]
  },
  {
    "name": "deprecated/Blob",
    "exports": [
      "public func compare(b1 : Blob, b2 : Blob) : { #less; #equal; #greater }",
      "public func equal(blob1 : Blob, blob2 : Blob) : Bool",
      "public func fromArray(bytes : [Nat8]) : Blob",
      "public func fromArrayMut(bytes : [var Nat8]) : Blob",
      "public func greater(blob1 : Blob, blob2 : Blob) : Bool",
      "public func greaterOrEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func hash(blob : Blob) : Nat32",
      "public func less(blob1 : Blob, blob2 : Blob) : Bool",
      "public func lessOrEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func notEqual(blob1 : Blob, blob2 : Blob) : Bool",
      "public func toArray(blob : Blob) : [Nat8]",
      "public func toArrayMut(blob : Blob) : [var Nat8]"
    ]
  },
  {
    "name": "deprecated/Bool",
    "exports": [
      "public func compare(x : Bool, y : Bool) : { #less; #equal; #greater }",
      "public func equal(x : Bool, y : Bool) : Bool",
      "public func logand(x : Bool, y : Bool) : Bool",
      "public func lognot(x : Bool) : Bool",
      "public func logor(x : Bool, y : Bool) : Bool",
      "public func logxor(x : Bool, y : Bool) : Bool",
      "public func notEqual(x : Bool, y : Bool) : Bool",
      "public func toText(x : Bool) : Text"
    ]
  },
  {
    "name": "deprecated/Buffer",
    "exports": [
      "public func binarySearch<X>(element : X, buffer : Buffer<X>, compare : (X, X) -> Order.Order) : ?Nat",
      "public class Buffer<X>(initCapacity : Nat)",
      "public func chain<X, Y>(buffer : Buffer<X>, k : X -> Buffer<Y>) : Buffer<Y>",
      "public func chunk<X>(buffer : Buffer<X>, size : Nat) : Buffer<Buffer<X>>",
      "public func clone<X>(buffer : Buffer<X>) : Buffer<X>",
      "public func compare<X>(buffer1 : Buffer<X>, buffer2 : Buffer<X>, compare : (X, X) -> Order.Order) : Order.Order",
      "public func contains<X>(buffer : Buffer<X>, element : X, equal : (X, X) -> Bool) : Bool",
      "public func dropWhile<X>(buffer : Buffer<X>, predicate : X -> Bool) : Buffer<X>",
      "public func equal<X>(buffer1 : Buffer<X>, buffer2 : Buffer<X>, equal : (X, X) -> Bool) : Bool",
      "public func first<X>(buffer : Buffer<X>) : X",
      "public func flatten<X>(buffer : Buffer<Buffer<X>>) : Buffer<X>",
      "public func foldLeft<A, X>(buffer : Buffer<X>, base : A, combine : (A, X) -> A) : A",
      "public func foldRight<X, A>(buffer : Buffer<X>, base : A, combine : (X, A) -> A) : A",
      "public func forAll<X>(buffer : Buffer<X>, predicate : X -> Bool) : Bool",
      "public func forNone<X>(buffer : Buffer<X>, predicate : X -> Bool) : Bool",
      "public func forSome<X>(buffer : Buffer<X>, predicate : X -> Bool) : Bool",
      "public func fromArray<X>(array : [X]) : Buffer<X>",
      "public func fromIter<X>(iter : { next : () -> ?X }) : Buffer<X>",
      "public func fromVarArray<X>(array : [var X]) : Buffer<X>",
      "public func groupBy<X>(buffer : Buffer<X>, equal : (X, X) -> Bool) : Buffer<Buffer<X>>",
      "public func hash<X>(buffer : Buffer<X>, hash : X -> Nat32) : Nat32",
      "public func indexOf<X>(element : X, buffer : Buffer<X>, equal : (X, X) -> Bool) : ?Nat",
      "public func indexOfBuffer<X>(subBuffer : Buffer<X>, buffer : Buffer<X>, equal : (X, X) -> Bool) : ?Nat",
      "public func isEmpty<X>(buffer : Buffer<X>) : Bool",
      "public func isPrefixOf<X>(prefix : Buffer<X>, buffer : Buffer<X>, equal : (X, X) -> Bool) : Bool",
      "public func isStrictPrefixOf<X>(prefix : Buffer<X>, buffer : Buffer<X>, equal : (X, X) -> Bool) : Bool",
      "public func isStrictSubBufferOf<X>(subBuffer : Buffer<X>, buffer : Buffer<X>, equal : (X, X) -> Bool) : Bool",
      "public func isStrictSuffixOf<X>(suffix : Buffer<X>, buffer : Buffer<X>, equal : (X, X) -> Bool) : Bool",
      "public func isSubBufferOf<X>(subBuffer : Buffer<X>, buffer : Buffer<X>, equal : (X, X) -> Bool) : Bool",
      "public func isSuffixOf<X>(suffix : Buffer<X>, buffer : Buffer<X>, equal : (X, X) -> Bool) : Bool",
      "public func iterate<X>(buffer : Buffer<X>, f : X -> ())",
      "public func last<X>(buffer : Buffer<X>) : X",
      "public func lastIndexOf<X>(element : X, buffer : Buffer<X>, equal : (X, X) -> Bool) : ?Nat",
      "public func make<X>(element : X) : Buffer<X>",
      "public func map<X, Y>(buffer : Buffer<X>, f : X -> Y) : Buffer<Y>",
      "public func mapEntries<X, Y>(buffer : Buffer<X>, f : (Nat, X) -> Y) : Buffer<Y>",
      "public func mapFilter<X, Y>(buffer : Buffer<X>, f : X -> ?Y) : Buffer<Y>",
      "public func mapResult<X, Y, E>(buffer : Buffer<X>, f : X -> Result.Result<Y, E>) : Result.Result<Buffer<Y>, E>",
      "public func max<X>(buffer : Buffer<X>, compare : (X, X) -> Order) : ?X",
      "public func merge<X>(buffer1 : Buffer<X>, buffer2 : Buffer<X>, compare : (X, X) -> Order) : Buffer<X>",
      "public func min<X>(buffer : Buffer<X>, compare : (X, X) -> Order) : ?X",
      "public func partition<X>(buffer : Buffer<X>, predicate : X -> Bool) : (Buffer<X>, Buffer<X>)",
      "public func prefix<X>(buffer : Buffer<X>, length : Nat) : Buffer<X>",
      "public func removeDuplicates<X>(buffer : Buffer<X>, compare : (X, X) -> Order)",
      "public func reverse<X>(buffer : Buffer<X>)",
      "public func split<X>(buffer : Buffer<X>, index : Nat) : (Buffer<X>, Buffer<X>)",
      "public func subBuffer<X>(buffer : Buffer<X>, start : Nat, length : Nat) : Buffer<X>",
      "public func suffix<X>(buffer : Buffer<X>, length : Nat) : Buffer<X>",
      "public func takeWhile<X>(buffer : Buffer<X>, predicate : X -> Bool) : Buffer<X>",
      "public func toArray<X>(buffer : Buffer<X>) : [X]",
      "public func toText<X>(buffer : Buffer<X>, toText : X -> Text) : Text",
      "public func toVarArray<X>(buffer : Buffer<X>) : [var X]",
      "public func trimToSize<X>(buffer : Buffer<X>)",
      "public func zip<X, Y>(buffer1 : Buffer<X>, buffer2 : Buffer<Y>) : Buffer<(X, Y)>",
      "public func zipWith<X, Y, Z>(buffer1 : Buffer<X>, buffer2 : Buffer<Y>, zip : (X, Y) -> Z) : Buffer<Z>"
    ]
  },
  {
    "name": "deprecated/CertifiedData",
    "exports": [
      "public let getCertificate : () -> ?Blob",
      "public let set : (data : Blob) -> ()"
    ]
  },
  {
    "name": "deprecated/Char",
    "exports": [
      "public func compare(x : Char, y : Char) : { #less; #equal; #greater }",
      "public func equal(x : Char, y : Char) : Bool",
      "public let fromNat32 : (w : Nat32) -> Char",
      "public func greater(x : Char, y : Char) : Bool",
      "public func greaterOrEqual(x : Char, y : Char) : Bool",
      "public let isAlphabetic : (c : Char) -> Bool",
      "public func isDigit(c : Char) : Bool",
      "public let isLowercase : (c : Char) -> Bool",
      "public let isUppercase : (c : Char) -> Bool",
      "public let isWhitespace : (c : Char) -> Bool",
      "public func less(x : Char, y : Char) : Bool",
      "public func lessOrEqual(x : Char, y : Char) : Bool",
      "public func notEqual(x : Char, y : Char) : Bool",
      "public let toNat32 : (c : Char) -> Nat32",
      "public let toText : (c : Char) -> Text"
    ]
  },
  {
    "name": "deprecated/Debug",
    "exports": [
      "public func print(text : Text)",
      "public func trap(errorMessage : Text) : None"
    ]
  },
  {
    "name": "deprecated/Deque",
    "exports": [
      "public func empty<T>() : Deque<T>",
      "public func isEmpty<T>(deque : Deque<T>) : Bool",
      "public func peekBack<T>(deque : Deque<T>) : ?T",
      "public func peekFront<T>(deque : Deque<T>) : ?T",
      "public func popBack<T>(deque : Deque<T>) : ?(Deque<T>, T)",
      "public func popFront<T>(deque : Deque<T>) : ?(T, Deque<T>)",
      "public func pushBack<T>(deque : Deque<T>, element : T) : Deque<T>",
      "public func pushFront<T>(deque : Deque<T>, element : T) : Deque<T>"
    ]
  },
  {
    "name": "deprecated/Error",
    "exports": [
      "public let code : (error : Error) -> ErrorCode",
      "public let message : (error : Error) -> Text",
      "public let reject : (message : Text) -> Error"
    ]
  },
  {
    "name": "deprecated/ExperimentalCycles",
    "exports": [
      "public let accept : <system>(amount : Nat) -> (accepted : Nat)",
      "public let add : <system>(amount : Nat) -> ()",
      "public let available : () -> (amount : Nat)",
      "public let balance : () -> (amount : Nat)",
      "public let refunded : () -> (amount : Nat)"
    ]
  },
  {
    "name": "deprecated/ExperimentalInternetComputer",
    "exports": [
      "public let call : (canister : Principal, name : Text, data : Blob) -> async (reply : Blob)",
      "public func countInstructions(comp : () -> ()) : Nat64",
      "public let performanceCounter : (counter : Nat32) -> (value: Nat64)"
    ]
  },
  {
    "name": "deprecated/ExperimentalStableMemory",
    "exports": [
      "public let grow : (newPages : Nat64) -> (oldPages : Nat64)",
      "public let loadBlob : (offset : Nat64, size : Nat) -> Blob",
      "public let loadFloat : (offset : Nat64) -> Float",
      "public let loadInt16 : (offset : Nat64) -> Int16",
      "public let loadInt32 : (offset : Nat64) -> Int32",
      "public let loadInt64 : (offset : Nat64) -> Int64",
      "public let loadInt8 : (offset : Nat64) -> Int8",
      "public let loadNat16 : (offset : Nat64) -> Nat16",
      "public let loadNat32 : (offset : Nat64) -> Nat32",
      "public let loadNat64 : (offset : Nat64) -> Nat64",
      "public let loadNat8 : (offset : Nat64) -> Nat8",
      "public let size : () -> (pages : Nat64)",
      "public let stableVarQuery : () -> (shared query () -> async",
      "public let storeBlob : (offset : Nat64, value : Blob) -> ()",
      "public let storeFloat : (offset : Nat64, value : Float) -> ()",
      "public let storeInt16 : (offset : Nat64, value : Int16) -> ()",
      "public let storeInt32 : (offset : Nat64, value : Int32) -> ()",
      "public let storeInt64 : (offset : Nat64, value : Int64) -> ()",
      "public let storeInt8 : (offset : Nat64, value : Int8) -> ()",
      "public let storeNat16 : (offset : Nat64, value : Nat16) -> ()",
      "public let storeNat32 : (offset : Nat64, value : Nat32) -> ()",
      "public let storeNat64 : (offset : Nat64, value : Nat64) -> ()",
      "public let storeNat8 : (offset : Nat64, value : Nat8) -> ()"
    ]
  },
  {
    "name": "deprecated/Float",
    "exports": [
      "public let abs : (x : Float) -> Float",
      "public func add(x : Float, y : Float) : Float",
      "public let arccos : (x : Float) -> Float",
      "public let arcsin : (x : Float) -> Float",
      "public let arctan : (x : Float) -> Float",
      "public let arctan2 : (y : Float, x : Float) -> Float",
      "public let ceil : (x : Float) -> Float",
      "public func compare(x : Float, y : Float) : { #less; #equal; #greater }",
      "public let copySign : (x : Float, y : Float) -> Float",
      "public let cos : (x : Float) -> Float",
      "public func div(x : Float, y : Float) : Float",
      "public let e : Float",
      "public func equal(x : Float, y : Float) : Bool",
      "public func equalWithin(x : Float, y : Float, epsilon : Float) : Bool",
      "public let exp : (x : Float) -> Float",
      "public let floor : (x : Float) -> Float",
      "public func format(fmt : { #fix : Nat8; #exp : Nat8; #gen : Nat8; #hex : Nat8; #exact }, x : Float) : Text",
      "public let fromInt : Int -> Float",
      "public let fromInt64 : Int64 -> Float",
      "public func greater(x : Float, y : Float) : Bool",
      "public func greaterOrEqual(x : Float, y : Float) : Bool",
      "public func isNaN(number : Float) : Bool",
      "public func less(x : Float, y : Float) : Bool",
      "public func lessOrEqual(x : Float, y : Float) : Bool",
      "public let log : (x : Float) -> Float",
      "public let max : (x : Float, y : Float) -> Float",
      "public let min : (x : Float, y : Float) -> Float",
      "public func mul(x : Float, y : Float) : Float",
      "public let nearest : (x : Float) -> Float",
      "public func neg(x : Float) : Float",
      "public func notEqual(x : Float, y : Float) : Bool",
      "public func notEqualWithin(x : Float, y : Float, epsilon : Float) : Bool",
      "public let pi : Float",
      "public func pow(x : Float, y : Float) : Float",
      "public func rem(x : Float, y : Float) : Float",
      "public let sin : (x : Float) -> Float",
      "public let sqrt : (x : Float) -> Float",
      "public func sub(x : Float, y : Float) : Float",
      "public let tan : (x : Float) -> Float",
      "public let toInt : Float -> Int",
      "public let toInt64 : Float -> Int64",
      "public let toText : Float -> Text",
      "public let trunc : (x : Float) -> Float"
    ]
  },
  {
    "name": "deprecated/Func",
    "exports": [
      "public func compose<A, B, C>(f : B -> C, g : A -> B) : A -> C",
      "public func const<A, B>(x : A) : B -> A",
      "public func identity<A>(x : A) : A"
    ]
  },
  {
    "name": "deprecated/Hash",
    "exports": [
      "public func bit(h : Hash, pos : Nat) : Bool",
      "public func debugPrintBits(bits : Hash)",
      "public func debugPrintBitsRev(bits : Hash)",
      "public func equal(ha : Hash, hb : Hash) : Bool",
      "public func hash(n : Nat) : Hash",
      "public func hashNat8(key : [Hash]) : Hash",
      "public let length : Nat"
    ]
  },
  {
    "name": "deprecated/HashMap",
    "exports": [
      "public func clone<K, V>( map : HashMap<K, V>, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash ) : HashMap<K, V>",
      "public func fromIter<K, V>( iter : Iter.Iter<(K, V)>, initCapacity : Nat, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash ) : HashMap<K, V>",
      "public class HashMap<K, V>( initCapacity : Nat, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash )",
      "public func map<K, V1, V2>( hashMap : HashMap<K, V1>, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash, f : (K, V1) -> V2 ) : HashMap<K, V2>",
      "public func mapFilter<K, V1, V2>( hashMap : HashMap<K, V1>, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash, f : (K, V1) -> ?V2 ) : HashMap<K, V2>"
    ]
  },
  {
    "name": "deprecated/Heap",
    "exports": [
      "public func fromIter<X>(iter : I.Iter<X>, compare : (X, X) -> O.Order) : Heap<X>",
      "public class Heap<X>(compare : (X, X) -> O.Order)"
    ]
  },
  {
    "name": "deprecated/Int",
    "exports": [
      "public func abs(x : Int) : Nat",
      "public func add(x : Int, y : Int) : Int",
      "public func compare(x : Int, y : Int) : { #less; #equal; #greater }",
      "public func div(x : Int, y : Int) : Int",
      "public func equal(x : Int, y : Int) : Bool",
      "public func greater(x : Int, y : Int) : Bool",
      "public func greaterOrEqual(x : Int, y : Int) : Bool",
      "public func hash(i : Int) : Hash.Hash",
      "public func hashAcc(h1 : Hash.Hash, i : Int) : Hash.Hash",
      "public func less(x : Int, y : Int) : Bool",
      "public func lessOrEqual(x : Int, y : Int) : Bool",
      "public func max(x : Int, y : Int) : Int",
      "public func min(x : Int, y : Int) : Int",
      "public func mul(x : Int, y : Int) : Int",
      "public func neg(x : Int) : Int",
      "public func notEqual(x : Int, y : Int) : Bool",
      "public func pow(x : Int, y : Int) : Int",
      "public func rem(x : Int, y : Int) : Int",
      "public func sub(x : Int, y : Int) : Int",
      "public func toText(x : Int) : Text"
    ]
  },
  {
    "name": "deprecated/Int16",
    "exports": [
      "public func abs(x : Int16) : Int16",
      "public func add(x : Int16, y : Int16) : Int16",
      "public func addWrap(x : Int16, y : Int16) : Int16",
      "public func bitand(x : Int16, y : Int16) : Int16",
      "public func bitclear(x : Int16, p : Nat) : Int16",
      "public let bitcountLeadingZero : (x : Int16) -> Int16",
      "public let bitcountNonZero : (x : Int16) -> Int16",
      "public let bitcountTrailingZero : (x : Int16) -> Int16",
      "public func bitflip(x : Int16, p : Nat) : Int16",
      "public func bitnot(x : Int16) : Int16",
      "public func bitor(x : Int16, y : Int16) : Int16",
      "public func bitrotLeft(x : Int16, y : Int16) : Int16",
      "public func bitrotRight(x : Int16, y : Int16) : Int16",
      "public func bitset(x : Int16, p : Nat) : Int16",
      "public func bitshiftLeft(x : Int16, y : Int16) : Int16",
      "public func bitshiftRight(x : Int16, y : Int16) : Int16",
      "public func bittest(x : Int16, p : Nat) : Bool",
      "public func bitxor(x : Int16, y : Int16) : Int16",
      "public func compare(x : Int16, y : Int16) : { #less; #equal; #greater }",
      "public func div(x : Int16, y : Int16) : Int16",
      "public func equal(x : Int16, y : Int16) : Bool",
      "public let fromInt : Int -> Int16",
      "public let fromInt32 : Int32 -> Int16",
      "public let fromInt8 : Int8 -> Int16",
      "public let fromIntWrap : Int -> Int16",
      "public let fromNat16 : Nat16 -> Int16",
      "public func greater(x : Int16, y : Int16) : Bool",
      "public func greaterOrEqual(x : Int16, y : Int16) : Bool",
      "public func less(x : Int16, y : Int16) : Bool",
      "public func lessOrEqual(x : Int16, y : Int16) : Bool",
      "public func max(x : Int16, y : Int16) : Int16",
      "public let maximumValue",
      "public func min(x : Int16, y : Int16) : Int16",
      "public let minimumValue",
      "public func mul(x : Int16, y : Int16) : Int16",
      "public func mulWrap(x : Int16, y : Int16) : Int16",
      "public func neg(x : Int16) : Int16",
      "public func notEqual(x : Int16, y : Int16) : Bool",
      "public func pow(x : Int16, y : Int16) : Int16",
      "public func powWrap(x : Int16, y : Int16) : Int16",
      "public func rem(x : Int16, y : Int16) : Int16",
      "public func sub(x : Int16, y : Int16) : Int16",
      "public func subWrap(x : Int16, y : Int16) : Int16",
      "public let toInt : Int16 -> Int",
      "public let toInt32 : Int16 -> Int32",
      "public let toInt8 : Int16 -> Int8",
      "public let toNat16 : Int16 -> Nat16",
      "public func toText(x : Int16) : Text"
    ]
  },
  {
    "name": "deprecated/Int32",
    "exports": [
      "public func abs(x : Int32) : Int32",
      "public func add(x : Int32, y : Int32) : Int32",
      "public func addWrap(x : Int32, y : Int32) : Int32",
      "public func bitand(x : Int32, y : Int32) : Int32",
      "public func bitclear(x : Int32, p : Nat) : Int32",
      "public let bitcountLeadingZero : (x : Int32) -> Int32",
      "public let bitcountNonZero : (x : Int32) -> Int32",
      "public let bitcountTrailingZero : (x : Int32) -> Int32",
      "public func bitflip(x : Int32, p : Nat) : Int32",
      "public func bitnot(x : Int32) : Int32",
      "public func bitor(x : Int32, y : Int32) : Int32",
      "public func bitrotLeft(x : Int32, y : Int32) : Int32",
      "public func bitrotRight(x : Int32, y : Int32) : Int32",
      "public func bitset(x : Int32, p : Nat) : Int32",
      "public func bitshiftLeft(x : Int32, y : Int32) : Int32",
      "public func bitshiftRight(x : Int32, y : Int32) : Int32",
      "public func bittest(x : Int32, p : Nat) : Bool",
      "public func bitxor(x : Int32, y : Int32) : Int32",
      "public func compare(x : Int32, y : Int32) : { #less; #equal; #greater }",
      "public func div(x : Int32, y : Int32) : Int32",
      "public func equal(x : Int32, y : Int32) : Bool",
      "public let fromInt : Int -> Int32",
      "public let fromInt16 : Int16 -> Int32",
      "public let fromInt64 : Int64 -> Int32",
      "public let fromIntWrap : Int -> Int32",
      "public let fromNat32 : Nat32 -> Int32",
      "public func greater(x : Int32, y : Int32) : Bool",
      "public func greaterOrEqual(x : Int32, y : Int32) : Bool",
      "public func less(x : Int32, y : Int32) : Bool",
      "public func lessOrEqual(x : Int32, y : Int32) : Bool",
      "public func max(x : Int32, y : Int32) : Int32",
      "public let maximumValue",
      "public func min(x : Int32, y : Int32) : Int32",
      "public let minimumValue",
      "public func mul(x : Int32, y : Int32) : Int32",
      "public func mulWrap(x : Int32, y : Int32) : Int32",
      "public func neg(x : Int32) : Int32",
      "public func notEqual(x : Int32, y : Int32) : Bool",
      "public func pow(x : Int32, y : Int32) : Int32",
      "public func powWrap(x : Int32, y : Int32) : Int32",
      "public func rem(x : Int32, y : Int32) : Int32",
      "public func sub(x : Int32, y : Int32) : Int32",
      "public func subWrap(x : Int32, y : Int32) : Int32",
      "public let toInt : Int32 -> Int",
      "public let toInt16 : Int32 -> Int16",
      "public let toInt64 : Int32 -> Int64",
      "public let toNat32 : Int32 -> Nat32",
      "public func toText(x : Int32) : Text"
    ]
  },
  {
    "name": "deprecated/Int64",
    "exports": [
      "public func abs(x : Int64) : Int64",
      "public func add(x : Int64, y : Int64) : Int64",
      "public func addWrap(x : Int64, y : Int64) : Int64",
      "public func bitand(x : Int64, y : Int64) : Int64",
      "public func bitclear(x : Int64, p : Nat) : Int64",
      "public let bitcountLeadingZero : (x : Int64) -> Int64",
      "public let bitcountNonZero : (x : Int64) -> Int64",
      "public let bitcountTrailingZero : (x : Int64) -> Int64",
      "public func bitflip(x : Int64, p : Nat) : Int64",
      "public func bitnot(x : Int64) : Int64",
      "public func bitor(x : Int64, y : Int64) : Int64",
      "public func bitrotLeft(x : Int64, y : Int64) : Int64",
      "public func bitrotRight(x : Int64, y : Int64) : Int64",
      "public func bitset(x : Int64, p : Nat) : Int64",
      "public func bitshiftLeft(x : Int64, y : Int64) : Int64",
      "public func bitshiftRight(x : Int64, y : Int64) : Int64",
      "public func bittest(x : Int64, p : Nat) : Bool",
      "public func bitxor(x : Int64, y : Int64) : Int64",
      "public func compare(x : Int64, y : Int64) : { #less; #equal; #greater }",
      "public func div(x : Int64, y : Int64) : Int64",
      "public func equal(x : Int64, y : Int64) : Bool",
      "public let fromInt : Int -> Int64",
      "public let fromInt32 : Int32 -> Int64",
      "public let fromIntWrap : Int -> Int64",
      "public let fromNat64 : Nat64 -> Int64",
      "public func greater(x : Int64, y : Int64) : Bool",
      "public func greaterOrEqual(x : Int64, y : Int64) : Bool",
      "public func less(x : Int64, y : Int64) : Bool",
      "public func lessOrEqual(x : Int64, y : Int64) : Bool",
      "public func max(x : Int64, y : Int64) : Int64",
      "public let maximumValue",
      "public func min(x : Int64, y : Int64) : Int64",
      "public let minimumValue",
      "public func mul(x : Int64, y : Int64) : Int64",
      "public func mulWrap(x : Int64, y : Int64) : Int64",
      "public func neg(x : Int64) : Int64",
      "public func notEqual(x : Int64, y : Int64) : Bool",
      "public func pow(x : Int64, y : Int64) : Int64",
      "public func powWrap(x : Int64, y : Int64) : Int64",
      "public func rem(x : Int64, y : Int64) : Int64",
      "public func sub(x : Int64, y : Int64) : Int64",
      "public func subWrap(x : Int64, y : Int64) : Int64",
      "public let toInt : Int64 -> Int",
      "public let toInt32 : Int64 -> Int32",
      "public let toNat64 : Int64 -> Nat64",
      "public func toText(x : Int64) : Text"
    ]
  },
  {
    "name": "deprecated/Int8",
    "exports": [
      "public func abs(x : Int8) : Int8",
      "public func add(x : Int8, y : Int8) : Int8",
      "public func addWrap(x : Int8, y : Int8) : Int8",
      "public func bitand(x : Int8, y : Int8) : Int8",
      "public func bitclear(x : Int8, p : Nat) : Int8",
      "public let bitcountLeadingZero : (x : Int8) -> Int8",
      "public let bitcountNonZero : (x : Int8) -> Int8",
      "public let bitcountTrailingZero : (x : Int8) -> Int8",
      "public func bitflip(x : Int8, p : Nat) : Int8",
      "public func bitnot(x : Int8) : Int8",
      "public func bitor(x : Int8, y : Int8) : Int8",
      "public func bitrotLeft(x : Int8, y : Int8) : Int8",
      "public func bitrotRight(x : Int8, y : Int8) : Int8",
      "public func bitset(x : Int8, p : Nat) : Int8",
      "public func bitshiftLeft(x : Int8, y : Int8) : Int8",
      "public func bitshiftRight(x : Int8, y : Int8) : Int8",
      "public func bittest(x : Int8, p : Nat) : Bool",
      "public func bitxor(x : Int8, y : Int8) : Int8",
      "public func compare(x : Int8, y : Int8) : { #less; #equal; #greater }",
      "public func div(x : Int8, y : Int8) : Int8",
      "public func equal(x : Int8, y : Int8) : Bool",
      "public let fromInt : Int -> Int8",
      "public let fromInt16 : Int16 -> Int8",
      "public let fromIntWrap : Int -> Int8",
      "public let fromNat8 : Nat8 -> Int8",
      "public func greater(x : Int8, y : Int8) : Bool",
      "public func greaterOrEqual(x : Int8, y : Int8) : Bool",
      "public func less(x : Int8, y : Int8) : Bool",
      "public func lessOrEqual(x : Int8, y : Int8) : Bool",
      "public func max(x : Int8, y : Int8) : Int8",
      "public let maximumValue",
      "public func min(x : Int8, y : Int8) : Int8",
      "public let minimumValue",
      "public func mul(x : Int8, y : Int8) : Int8",
      "public func mulWrap(x : Int8, y : Int8) : Int8",
      "public func neg(x : Int8) : Int8",
      "public func notEqual(x : Int8, y : Int8) : Bool",
      "public func pow(x : Int8, y : Int8) : Int8",
      "public func powWrap(x : Int8, y : Int8) : Int8",
      "public func rem(x : Int8, y : Int8) : Int8",
      "public func sub(x : Int8, y : Int8) : Int8",
      "public func subWrap(x : Int8, y : Int8) : Int8",
      "public let toInt : Int8 -> Int",
      "public let toInt16 : Int8 -> Int16",
      "public let toNat8 : Int8 -> Nat8",
      "public func toText(x : Int8) : Text"
    ]
  },
  {
    "name": "deprecated/Iter",
    "exports": [
      "public func concat<A>(a : Iter<A>, b : Iter<A>) : Iter<A>",
      "public func filter<A>(xs : Iter<A>, f : A -> Bool) : Iter<A>",
      "public func fromArray<A>(xs : [A]) : Iter<A>",
      "public func fromArrayMut<A>(xs : [var A]) : Iter<A>",
      "public let fromList",
      "public func iterate<A>( xs : Iter<A>, f : (A, Nat) -> () )",
      "public func make<A>(x : A) : Iter<A>",
      "public func map<A, B>(xs : Iter<A>, f : A -> B) : Iter<B>",
      "public class range(x : Nat, y : Int)",
      "public class revRange(x : Int, y : Int)",
      "public func size<A>(xs : Iter<A>) : Nat",
      "public func sort<A>(xs : Iter<A>, compare : (A, A) -> Order.Order) : Iter<A>",
      "public func toArray<A>(xs : Iter<A>) : [A]",
      "public func toArrayMut<A>(xs : Iter<A>) : [var A]",
      "public func toList<A>(xs : Iter<A>) : List.List<A>"
    ]
  },
  {
    "name": "deprecated/IterType",
    "exports": []
  },
  {
    "name": "deprecated/List",
    "exports": [
      "public func all<T>(l : List<T>, f : T -> Bool) : Bool",
      "public func append<T>(l : List<T>, m : List<T>) : List<T>",
      "public func chunks<T>(n : Nat, xs : List<T>) : List<List<T>>",
      "public func compare<T>(l1 : List<T>, l2 : List<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func drop<T>(l : List<T>, n : Nat) : List<T>",
      "public func equal<T>(l1 : List<T>, l2 : List<T>, equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(l : List<T>, f : T -> Bool) : List<T>",
      "public func find<T>(l : List<T>, f : T -> Bool) : ?T",
      "public func flatten<T>(l : List<List<T>>) : List<T>",
      "public func foldLeft<T, S>(list : List<T>, base : S, combine : (S, T) -> S) : S",
      "public func foldRight<T, S>(list : List<T>, base : S, combine : (T, S) -> S) : S",
      "public func fromArray<T>(xs : [T]) : List<T>",
      "public func fromVarArray<T>(xs : [var T]) : List<T>",
      "public func get<T>(l : List<T>, n : Nat) : ?T",
      "public func isNil<T>(l : List<T>) : Bool",
      "public func iterate<T>(l : List<T>, f : T -> ())",
      "public func last<T>(l : List<T>) : ?T",
      "public func make<T>(x : T) : List<T>",
      "public func map<T, U>(l : List<T>, f : T -> U) : List<U>",
      "public func mapFilter<T, U>(l : List<T>, f : T -> ?U) : List<U>",
      "public func mapResult<T, R, E>(xs : List<T>, f : T -> Result.Result<R, E>) : Result.Result<List<R>, E>",
      "public func merge<T>(l1 : List<T>, l2 : List<T>, lessThanOrEqual : (T, T) -> Bool) : List<T>",
      "public func nil<T>() : List<T>",
      "public func partition<T>(l : List<T>, f : T -> Bool) : (List<T>, List<T>)",
      "public func pop<T>(l : List<T>) : (?T, List<T>)",
      "public func push<T>(x : T, l : List<T>) : List<T>",
      "public func replicate<T>(n : Nat, x : T) : List<T>",
      "public func reverse<T>(l : List<T>) : List<T>",
      "public func size<T>(l : List<T>) : Nat",
      "public func some<T>(l : List<T>, f : T -> Bool) : Bool",
      "public func split<T>(n : Nat, xs : List<T>) : (List<T>, List<T>)",
      "public func tabulate<T>(n : Nat, f : Nat -> T) : List<T>",
      "public func take<T>(l : List<T>, n : Nat) : List<T>",
      "public func toArray<T>(xs : List<T>) : [T]",
      "public func toIter<T>(xs : List<T>) : Iter.Iter<T>",
      "public func toVarArray<T>(xs : List<T>) : [var T]",
      "public func zip<T, U>(xs : List<T>, ys : List<U>) : List<(T, U)>",
      "public func zipWith<T, U, V>( xs : List<T>, ys : List<U>, f : (T, U) -> V ) : List<V>"
    ]
  },
  {
    "name": "deprecated/Nat",
    "exports": [
      "public func add(x : Nat, y : Nat) : Nat",
      "public func bitshiftLeft(x : Nat, y : Nat32) : Nat",
      "public func bitshiftRight(x : Nat, y : Nat32) : Nat",
      "public func compare(x : Nat, y : Nat) : { #less; #equal; #greater }",
      "public func div(x : Nat, y : Nat) : Nat",
      "public func equal(x : Nat, y : Nat) : Bool",
      "public func fromText(text : Text) : ?Nat",
      "public func greater(x : Nat, y : Nat) : Bool",
      "public func greaterOrEqual(x : Nat, y : Nat) : Bool",
      "public func less(x : Nat, y : Nat) : Bool",
      "public func lessOrEqual(x : Nat, y : Nat) : Bool",
      "public func max(x : Nat, y : Nat) : Nat",
      "public func min(x : Nat, y : Nat) : Nat",
      "public func mul(x : Nat, y : Nat) : Nat",
      "public func notEqual(x : Nat, y : Nat) : Bool",
      "public func pow(x : Nat, y : Nat) : Nat",
      "public func rem(x : Nat, y : Nat) : Nat",
      "public func sub(x : Nat, y : Nat) : Nat",
      "public func toText(n : Nat) : Text"
    ]
  },
  {
    "name": "deprecated/Nat16",
    "exports": [
      "public func add(x : Nat16, y : Nat16) : Nat16",
      "public func addWrap(x : Nat16, y : Nat16) : Nat16",
      "public func bitand(x : Nat16, y : Nat16) : Nat16",
      "public func bitclear(x : Nat16, p : Nat) : Nat16",
      "public let bitcountLeadingZero : (x : Nat16) -> Nat16",
      "public let bitcountNonZero : (x : Nat16) -> Nat16",
      "public let bitcountTrailingZero : (x : Nat16) -> Nat16",
      "public func bitflip(x : Nat16, p : Nat) : Nat16",
      "public func bitnot(x : Nat16) : Nat16",
      "public func bitor(x : Nat16, y : Nat16) : Nat16",
      "public func bitrotLeft(x : Nat16, y : Nat16) : Nat16",
      "public func bitrotRight(x : Nat16, y : Nat16) : Nat16",
      "public func bitset(x : Nat16, p : Nat) : Nat16",
      "public func bitshiftLeft(x : Nat16, y : Nat16) : Nat16",
      "public func bitshiftRight(x : Nat16, y : Nat16) : Nat16",
      "public func bittest(x : Nat16, p : Nat) : Bool",
      "public func bitxor(x : Nat16, y : Nat16) : Nat16",
      "public func compare(x : Nat16, y : Nat16) : { #less; #equal; #greater }",
      "public func div(x : Nat16, y : Nat16) : Nat16",
      "public func equal(x : Nat16, y : Nat16) : Bool",
      "public let fromIntWrap : Int -> Nat16",
      "public let fromNat : Nat -> Nat16",
      "public func fromNat32(x : Nat32) : Nat16",
      "public func fromNat8(x : Nat8) : Nat16",
      "public func greater(x : Nat16, y : Nat16) : Bool",
      "public func greaterOrEqual(x : Nat16, y : Nat16) : Bool",
      "public func less(x : Nat16, y : Nat16) : Bool",
      "public func lessOrEqual(x : Nat16, y : Nat16) : Bool",
      "public func max(x : Nat16, y : Nat16) : Nat16",
      "public let maximumValue",
      "public func min(x : Nat16, y : Nat16) : Nat16",
      "public func mul(x : Nat16, y : Nat16) : Nat16",
      "public func mulWrap(x : Nat16, y : Nat16) : Nat16",
      "public func notEqual(x : Nat16, y : Nat16) : Bool",
      "public func pow(x : Nat16, y : Nat16) : Nat16",
      "public func powWrap(x : Nat16, y : Nat16) : Nat16",
      "public func rem(x : Nat16, y : Nat16) : Nat16",
      "public func sub(x : Nat16, y : Nat16) : Nat16",
      "public func subWrap(x : Nat16, y : Nat16) : Nat16",
      "public let toNat : Nat16 -> Nat",
      "public func toNat32(x : Nat16) : Nat32",
      "public func toNat8(x : Nat16) : Nat8",
      "public func toText(x : Nat16) : Text"
    ]
  },
  {
    "name": "deprecated/Nat32",
    "exports": [
      "public func add(x : Nat32, y : Nat32) : Nat32",
      "public func addWrap(x : Nat32, y : Nat32) : Nat32",
      "public func bitand(x : Nat32, y : Nat32) : Nat32",
      "public func bitclear(x : Nat32, p : Nat) : Nat32",
      "public let bitcountLeadingZero : (x : Nat32) -> Nat32",
      "public let bitcountNonZero : (x : Nat32) -> Nat32",
      "public let bitcountTrailingZero : (x : Nat32) -> Nat32",
      "public func bitflip(x : Nat32, p : Nat) : Nat32",
      "public func bitnot(x : Nat32) : Nat32",
      "public func bitor(x : Nat32, y : Nat32) : Nat32",
      "public func bitrotLeft(x : Nat32, y : Nat32) : Nat32",
      "public func bitrotRight(x : Nat32, y : Nat32) : Nat32",
      "public func bitset(x : Nat32, p : Nat) : Nat32",
      "public func bitshiftLeft(x : Nat32, y : Nat32) : Nat32",
      "public func bitshiftRight(x : Nat32, y : Nat32) : Nat32",
      "public func bittest(x : Nat32, p : Nat) : Bool",
      "public func bitxor(x : Nat32, y : Nat32) : Nat32",
      "public func compare(x : Nat32, y : Nat32) : { #less; #equal; #greater }",
      "public func div(x : Nat32, y : Nat32) : Nat32",
      "public func equal(x : Nat32, y : Nat32) : Bool",
      "public let fromIntWrap : Int -> Nat32",
      "public let fromNat : Nat -> Nat32",
      "public func fromNat16(x : Nat16) : Nat32",
      "public func fromNat64(x : Nat64) : Nat32",
      "public func greater(x : Nat32, y : Nat32) : Bool",
      "public func greaterOrEqual(x : Nat32, y : Nat32) : Bool",
      "public func less(x : Nat32, y : Nat32) : Bool",
      "public func lessOrEqual(x : Nat32, y : Nat32) : Bool",
      "public func max(x : Nat32, y : Nat32) : Nat32",
      "public let maximumValue",
      "public func min(x : Nat32, y : Nat32) : Nat32",
      "public func mul(x : Nat32, y : Nat32) : Nat32",
      "public func mulWrap(x : Nat32, y : Nat32) : Nat32",
      "public func notEqual(x : Nat32, y : Nat32) : Bool",
      "public func pow(x : Nat32, y : Nat32) : Nat32",
      "public func powWrap(x : Nat32, y : Nat32) : Nat32",
      "public func rem(x : Nat32, y : Nat32) : Nat32",
      "public func sub(x : Nat32, y : Nat32) : Nat32",
      "public func subWrap(x : Nat32, y : Nat32) : Nat32",
      "public let toNat : Nat32 -> Nat",
      "public func toNat16(x : Nat32) : Nat16",
      "public func toNat64(x : Nat32) : Nat64",
      "public func toText(x : Nat32) : Text"
    ]
  },
  {
    "name": "deprecated/Nat64",
    "exports": [
      "public func add(x : Nat64, y : Nat64) : Nat64",
      "public func addWrap(x : Nat64, y : Nat64) : Nat64",
      "public func bitand(x : Nat64, y : Nat64) : Nat64",
      "public func bitclear(x : Nat64, p : Nat) : Nat64",
      "public let bitcountLeadingZero : (x : Nat64) -> Nat64",
      "public let bitcountNonZero : (x : Nat64) -> Nat64",
      "public let bitcountTrailingZero : (x : Nat64) -> Nat64",
      "public func bitflip(x : Nat64, p : Nat) : Nat64",
      "public func bitnot(x : Nat64) : Nat64",
      "public func bitor(x : Nat64, y : Nat64) : Nat64",
      "public func bitrotLeft(x : Nat64, y : Nat64) : Nat64",
      "public func bitrotRight(x : Nat64, y : Nat64) : Nat64",
      "public func bitset(x : Nat64, p : Nat) : Nat64",
      "public func bitshiftLeft(x : Nat64, y : Nat64) : Nat64",
      "public func bitshiftRight(x : Nat64, y : Nat64) : Nat64",
      "public func bittest(x : Nat64, p : Nat) : Bool",
      "public func bitxor(x : Nat64, y : Nat64) : Nat64",
      "public func compare(x : Nat64, y : Nat64) : { #less; #equal; #greater }",
      "public func div(x : Nat64, y : Nat64) : Nat64",
      "public func equal(x : Nat64, y : Nat64) : Bool",
      "public let fromIntWrap : Int -> Nat64",
      "public let fromNat : Nat -> Nat64",
      "public func fromNat32(x : Nat32) : Nat64",
      "public func greater(x : Nat64, y : Nat64) : Bool",
      "public func greaterOrEqual(x : Nat64, y : Nat64) : Bool",
      "public func less(x : Nat64, y : Nat64) : Bool",
      "public func lessOrEqual(x : Nat64, y : Nat64) : Bool",
      "public func max(x : Nat64, y : Nat64) : Nat64",
      "public let maximumValue",
      "public func min(x : Nat64, y : Nat64) : Nat64",
      "public func mul(x : Nat64, y : Nat64) : Nat64",
      "public func mulWrap(x : Nat64, y : Nat64) : Nat64",
      "public func notEqual(x : Nat64, y : Nat64) : Bool",
      "public func pow(x : Nat64, y : Nat64) : Nat64",
      "public func powWrap(x : Nat64, y : Nat64) : Nat64",
      "public func rem(x : Nat64, y : Nat64) : Nat64",
      "public func sub(x : Nat64, y : Nat64) : Nat64",
      "public func subWrap(x : Nat64, y : Nat64) : Nat64",
      "public let toNat : Nat64 -> Nat",
      "public func toNat32(x : Nat64) : Nat32",
      "public func toText(x : Nat64) : Text"
    ]
  },
  {
    "name": "deprecated/Nat8",
    "exports": [
      "public func add(x : Nat8, y : Nat8) : Nat8",
      "public func addWrap(x : Nat8, y : Nat8) : Nat8",
      "public func bitand(x : Nat8, y : Nat8) : Nat8",
      "public func bitclear(x : Nat8, p : Nat) : Nat8",
      "public let bitcountLeadingZero : (x : Nat8) -> Nat8",
      "public let bitcountNonZero : (x : Nat8) -> Nat8",
      "public let bitcountTrailingZero : (x : Nat8) -> Nat8",
      "public func bitflip(x : Nat8, p : Nat) : Nat8",
      "public func bitnot(x : Nat8) : Nat8",
      "public func bitor(x : Nat8, y : Nat8) : Nat8",
      "public func bitrotLeft(x : Nat8, y : Nat8) : Nat8",
      "public func bitrotRight(x : Nat8, y : Nat8) : Nat8",
      "public func bitset(x : Nat8, p : Nat) : Nat8",
      "public func bitshiftLeft(x : Nat8, y : Nat8) : Nat8",
      "public func bitshiftRight(x : Nat8, y : Nat8) : Nat8",
      "public func bittest(x : Nat8, p : Nat) : Bool",
      "public func bitxor(x : Nat8, y : Nat8) : Nat8",
      "public func compare(x : Nat8, y : Nat8) : { #less; #equal; #greater }",
      "public func div(x : Nat8, y : Nat8) : Nat8",
      "public func equal(x : Nat8, y : Nat8) : Bool",
      "public let fromIntWrap : Int -> Nat8",
      "public let fromNat : Nat -> Nat8",
      "public let fromNat16 : Nat16 -> Nat8",
      "public func greater(x : Nat8, y : Nat8) : Bool",
      "public func greaterOrEqual(x : Nat8, y : Nat8) : Bool",
      "public func less(x : Nat8, y : Nat8) : Bool",
      "public func lessOrEqual(x : Nat8, y : Nat8) : Bool",
      "public func max(x : Nat8, y : Nat8) : Nat8",
      "public let maximumValue",
      "public func min(x : Nat8, y : Nat8) : Nat8",
      "public func mul(x : Nat8, y : Nat8) : Nat8",
      "public func mulWrap(x : Nat8, y : Nat8) : Nat8",
      "public func notEqual(x : Nat8, y : Nat8) : Bool",
      "public func pow(x : Nat8, y : Nat8) : Nat8",
      "public func powWrap(x : Nat8, y : Nat8) : Nat8",
      "public func rem(x : Nat8, y : Nat8) : Nat8",
      "public func sub(x : Nat8, y : Nat8) : Nat8",
      "public func subWrap(x : Nat8, y : Nat8) : Nat8",
      "public let toNat : Nat8 -> Nat",
      "public let toNat16 : Nat8 -> Nat16",
      "public func toText(x : Nat8) : Text"
    ]
  },
  {
    "name": "deprecated/None",
    "exports": [
      "public let impossible : <A> None -> A"
    ]
  },
  {
    "name": "deprecated/Option",
    "exports": [
      "public func apply<A, B>(x : ?A, f : ?(A -> B)) : ?B",
      "public func assertNull(x : ?Any)",
      "public func assertSome(x : ?Any)",
      "public func chain<A, B>(x : ?A, f : A -> ?B) : ?B",
      "public func equal<A>(x : ?A, y : ?A, eq : (A, A) -> Bool) : Bool",
      "public func flatten<A>(x : ??A) : ?A",
      "public func get<T>(x : ?T, default : T) : T",
      "public func getMapped<A, B>(x : ?A, f : A -> B, default : B) : B",
      "public func isNull(x : ?Any) : Bool",
      "public func isSome(x : ?Any) : Bool",
      "public func iterate<A>(x : ?A, f : A -> ())",
      "public func make<A>(x : A) : ?A",
      "public func map<A, B>(x : ?A, f : A -> B) : ?B",
      "public func unwrap<T>(x : ?T) : T"
    ]
  },
  {
    "name": "deprecated/Order",
    "exports": [
      "public func equal(o1 : Order, o2 : Order) : Bool",
      "public func isEqual(order : Order) : Bool",
      "public func isGreater(order : Order) : Bool",
      "public func isLess(order : Order) : Bool"
    ]
  },
  {
    "name": "deprecated/Prelude",
    "exports": [
      "public func nyi() : None",
      "public func unreachable() : None",
      "public func xxx() : None"
    ]
  },
  {
    "name": "deprecated/Principal",
    "exports": [
      "public func compare(principal1 : Principal, principal2 : Principal) : { #less; #equal; #greater }",
      "public func equal(principal1 : Principal, principal2 : Principal) : Bool",
      "public func fromActor(a : actor",
      "public func fromBlob(b : Blob) : Principal",
      "public func fromText(t : Text) : Principal",
      "public func greater(principal1 : Principal, principal2 : Principal) : Bool",
      "public func greaterOrEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public func hash(principal : Principal) : Hash.Hash",
      "public func isAnonymous(p : Principal) : Bool",
      "public func isController(p : Principal) : Bool",
      "public func less(principal1 : Principal, principal2 : Principal) : Bool",
      "public func lessOrEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public func notEqual(principal1 : Principal, principal2 : Principal) : Bool",
      "public func toBlob(p : Principal) : Blob",
      "public func toLedgerAccount(principal : Principal, subAccount : ?Blob) : Blob",
      "public func toText(p : Principal) : Text"
    ]
  },
  {
    "name": "deprecated/RBTree",
    "exports": [
      "public func iter<X, Y>(tree : Tree<X, Y>, direction : { #fwd; #bwd }) : I.Iter<(X, Y)>",
      "public class RBTree<K, V>(compare : (K, K) -> O.Order)",
      "public func size<X, Y>(t : Tree<X, Y>) : Nat"
    ]
  },
  {
    "name": "deprecated/Random",
    "exports": [
      "public func binomialFrom(n : Nat8, seed : Blob) : Nat8",
      "public let blob : shared () -> async Blob",
      "public func byteFrom(seed : Blob) : Nat8",
      "public func coinFrom(seed : Blob) : Bool",
      "public class Finite(entropy : Blob)",
      "public func rangeFrom(p : Nat8, seed : Blob) : Nat"
    ]
  },
  {
    "name": "deprecated/Region",
    "exports": [
      "public let grow : (region : Region, newPages : Nat64) -> (oldPages : Nat64)",
      "public let id : Region -> Nat",
      "public let loadBlob : (region : Region, offset : Nat64, size : Nat) -> Blob",
      "public let loadFloat : (region : Region, offset : Nat64) -> Float",
      "public let loadInt16 : (region : Region, offset : Nat64) -> Int16",
      "public let loadInt32 : (region : Region, offset : Nat64) -> Int32",
      "public let loadInt64 : (region : Region, offset : Nat64) -> Int64",
      "public let loadInt8 : (region : Region, offset : Nat64) -> Int8",
      "public let loadNat16 : (region : Region, offset : Nat64) -> Nat16",
      "public let loadNat32 : (region : Region, offset : Nat64) -> Nat32",
      "public let loadNat64 : (region : Region, offset : Nat64) -> Nat64",
      "public let loadNat8 : (region : Region, offset : Nat64) -> Nat8",
      "public let new : () -> Region",
      "public let size : (region : Region) -> (pages : Nat64)",
      "public let storeBlob : (region : Region, offset : Nat64, value : Blob) -> ()",
      "public let storeFloat : (region: Region, offset : Nat64, value : Float) -> ()",
      "public let storeInt16 : (region : Region, offset : Nat64, value : Int16) -> ()",
      "public let storeInt32 : (region : Region, offset : Nat64, value : Int32) -> ()",
      "public let storeInt64 : (region : Region, offset : Nat64, value : Int64) -> ()",
      "public let storeInt8 : (region : Region, offset : Nat64, value : Int8) -> ()",
      "public let storeNat16 : (region : Region, offset : Nat64, value : Nat16) -> ()",
      "public let storeNat32 : (region : Region, offset : Nat64, value : Nat32) -> ()",
      "public let storeNat64 : (region : Region, offset : Nat64, value : Nat64) -> ()",
      "public let storeNat8 : (region : Region, offset : Nat64, value : Nat8) -> ()"
    ]
  },
  {
    "name": "deprecated/Result",
    "exports": [
      "public func assertErr(r : Result<Any, Any>)",
      "public func assertOk(r : Result<Any, Any>)",
      "public func chain<R1, R2, Error>( x : Result<R1, Error>, y : R1 -> Result<R2, Error> ) : Result<R2, Error>",
      "public func compare<Ok, Err>( compareOk : (Ok, Ok) -> Order.Order, compareErr : (Err, Err) -> Order.Order, r1 : Result<Ok, Err>, r2 : Result<Ok, Err> ) : Order.Order",
      "public func equal<Ok, Err>( eqOk : (Ok, Ok) -> Bool, eqErr : (Err, Err) -> Bool, r1 : Result<Ok, Err>, r2 : Result<Ok, Err> ) : Bool",
      "public func flatten<Ok, Error>( result : Result<Result<Ok, Error>, Error> ) : Result<Ok, Error>",
      "public func fromOption<R, E>(x : ?R, err : E) : Result<R, E>",
      "public func fromUpper<Ok, Err>( result : { #Ok: Ok; #Err: Err } ) : Result<Ok, Err>",
      "public func isErr(r : Result<Any, Any>) : Bool",
      "public func isOk(r : Result<Any, Any>) : Bool",
      "public func iterate<Ok, Err>(res : Result<Ok, Err>, f : Ok -> ())",
      "public func mapErr<Ok, Error1, Error2>( x : Result<Ok, Error1>, f : Error1 -> Error2 ) : Result<Ok, Error2>",
      "public func mapOk<Ok1, Ok2, Error>( x : Result<Ok1, Error>, f : Ok1 -> Ok2 ) : Result<Ok2, Error>",
      "public func toOption<R, E>(r : Result<R, E>) : ?R",
      "public func toUpper<Ok, Err>( result : Result<Ok, Err> ) : { #Ok: Ok; #Err: Err }"
    ]
  },
  {
    "name": "deprecated/Stack",
    "exports": [
      "public class Stack<T>()"
    ]
  },
  {
    "name": "deprecated/Text",
    "exports": [
      "public func compare(t1 : Text, t2 : Text) : { #less; #equal; #greater }",
      "public func compareWith( t1 : Text, t2 : Text, cmp : (Char, Char) ->",
      "public func concat(t1 : Text, t2 : Text) : Text",
      "public func contains(t : Text, p : Pattern) : Bool",
      "public let decodeUtf8 : Blob -> ?Text",
      "public let encodeUtf8 : Text -> Blob",
      "public func endsWith(t : Text, p : Pattern) : Bool",
      "public func equal(t1 : Text, t2 : Text) : Bool",
      "public let fromChar : (c : Char) -> Text",
      "public func fromIter(cs : Iter.Iter<Char>) : Text",
      "public func greater(t1 : Text, t2 : Text) : Bool",
      "public func greaterOrEqual(t1 : Text, t2 : Text) : Bool",
      "public func hash(t : Text) : Hash.Hash",
      "public func join(sep : Text, ts : Iter.Iter<Text>) : Text",
      "public func less(t1 : Text, t2 : Text) : Bool",
      "public func lessOrEqual(t1 : Text, t2 : Text) : Bool",
      "public func map(t : Text, f : Char -> Char) : Text",
      "public func notEqual(t1 : Text, t2 : Text) : Bool",
      "public func replace(t : Text, p : Pattern, r : Text) : Text",
      "public func size(t : Text) : Nat",
      "public func split(t : Text, p : Pattern) : Iter.Iter<Text>",
      "public func startsWith(t : Text, p : Pattern) : Bool",
      "public func stripEnd(t : Text, p : Pattern) : ?Text",
      "public func stripStart(t : Text, p : Pattern) : ?Text",
      "public func toArray(t : Text) : [Char]",
      "public func toIter(t : Text) : Iter.Iter<Char>",
      "public func tokens(t : Text, p : Pattern) : Iter.Iter<Text>",
      "public let toLowercase : Text -> Text",
      "public let toUppercase : Text -> Text",
      "public func toVarArray(t : Text) : [var Char]",
      "public func translate(t : Text, f : Char -> Text) : Text",
      "public func trim(t : Text, p : Pattern) : Text",
      "public func trimEnd(t : Text, p : Pattern) : Text",
      "public func trimStart(t : Text, p : Pattern) : Text"
    ]
  },
  {
    "name": "deprecated/Time",
    "exports": [
      "public let now : () -> Time"
    ]
  },
  {
    "name": "deprecated/Timer",
    "exports": [
      "public let cancelTimer : TimerId -> ()",
      "public func recurringTimer<system>(d : Duration, job : () -> async ()) : TimerId",
      "public func setTimer<system>(d : Duration, job : () -> async ()) : TimerId"
    ]
  },
  {
    "name": "deprecated/Trie",
    "exports": [
      "public func all<K, V>(t : Trie<K, V>, f : (K, V) -> Bool) : Bool",
      "public func branch<K, V>(l : Trie<K, V>, r : Trie<K, V>) : Trie<K, V>",
      "public func clone<K, V>(t : Trie<K, V>) : Trie<K, V>",
      "public func diff<K, V, W>(tl : Trie<K, V>, tr : Trie<K, W>, k_eq : (K, K) -> Bool) : Trie<K, V>",
      "public func disj<K, V, W, X>( tl : Trie<K, V>, tr : Trie<K, W>, k_eq : (K, K) -> Bool, vbin : (?V, ?W) -> X ) : Trie<K, X>",
      "public func empty<K, V>() : Trie<K, V>",
      "public func equalKey<K>(keq : (K, K) -> Bool) : ((Key<K>, Key<K>) -> Bool)",
      "public func equalStructure<K, V>( tl : Trie<K, V>, tr : Trie<K, V>, keq : (K, K) -> Bool, veq : (V, V) -> Bool ) : Bool",
      "public func filter<K, V>(t : Trie<K, V>, f : (K, V) -> Bool) : Trie<K, V>",
      "public func find<K, V>(t : Trie<K, V>, k : Key<K>, k_eq : (K, K) -> Bool) : ?V",
      "public func fold<K, V, X>(t : Trie<K, V>, f : (K, V, X) -> X, x : X) : X",
      "public func foldUp<K, V, X>(t : Trie<K, V>, bin : (X, X) -> X, leaf : (K, V) -> X, empty : X) : X",
      "public func fromList<K, V>(kvc : ?Nat, kvs : AssocList<Key<K>, V>, bitpos : Nat) : Trie<K, V>",
      "public func get<K, V>(t : Trie<K, V>, k : Key<K>, k_eq : (K, K) -> Bool) : ?V",
      "public func isEmpty<K, V>(t : Trie<K, V>) : Bool",
      "public func isValid<K, V>(t : Trie<K, V>, _enforceNormal : Bool) : Bool",
      "public func iter<K, V>(t : Trie<K, V>) : I.Iter<(K, V)>",
      "public func join<K, V, W, X>( tl : Trie<K, V>, tr : Trie<K, W>, k_eq : (K, K) -> Bool, vbin : (V, W) -> X ) : Trie<K, X>",
      "public func leaf<K, V>(kvs : AssocList<Key<K>, V>, bitpos : Nat) : Trie<K, V>",
      "public func mapFilter<K, V, W>(t : Trie<K, V>, f : (K, V) -> ?W) : Trie<K, W>",
      "public func merge<K, V>(tl : Trie<K, V>, tr : Trie<K, V>, k_eq : (K, K) -> Bool) : Trie<K, V>",
      "public func mergeDisjoint<K, V>(tl : Trie<K, V>, tr : Trie<K, V>, k_eq : (K, K) -> Bool) : Trie<K, V>",
      "public func mergeDisjoint2D<K1, K2, V>( t : Trie2D<K1, K2, V>, _k1_eq : (K1, K1) -> Bool, k2_eq : (K2, K2) -> Bool ) : Trie<K2, V>",
      "public func nth<K, V>(t : Trie<K, V>, i : Nat) : ?(Key<K>, V)",
      "public func prod<K1, V1, K2, V2, K3, V3>( tl : Trie<K1, V1>, tr : Trie<K2, V2>, op : (K1, V1, K2, V2) -> ?(Key<K3>, V3), k3_eq : (K3, K3) -> Bool ) : Trie<K3, V3>",
      "public func put<K, V>(t : Trie<K, V>, k : Key<K>, k_eq : (K, K) -> Bool, v : V) : (Trie<K, V>, ?V)",
      "public func put2D<K1, K2, V>( t : Trie2D<K1, K2, V>, k1 : Key<K1>, k1_eq : (K1, K1) -> Bool, k2 : Key<K2>, k2_eq : (K2, K2) -> Bool, v : V ) : Trie2D<K1, K2, V>",
      "public func put3D<K1, K2, K3, V>( t : Trie3D<K1, K2, K3, V>, k1 : Key<K1>, k1_eq : (K1, K1) -> Bool, k2 : Key<K2>, k2_eq : (K2, K2) -> Bool, k3 : Key<K3>, k3_eq : (K3, K3) -> Bool, v : V ) : Trie3D<K1, K2, K3, V>",
      "public func putFresh<K, V>(t : Trie<K, V>, k : Key<K>, k_eq : (K, K) -> Bool, v : V) : Trie<K, V>",
      "public func remove<K, V>(t : Trie<K, V>, k : Key<K>, k_eq : (K, K) -> Bool) : (Trie<K, V>, ?V)",
      "public func remove2D<K1, K2, V>( t : Trie2D<K1, K2, V>, k1 : Key<K1>, k1_eq : (K1, K1) -> Bool, k2 : Key<K2>, k2_eq : (K2, K2) -> Bool ) : (Trie2D<K1, K2, V>, ?V)",
      "public func remove3D<K1, K2, K3, V>( t : Trie3D<K1, K2, K3, V>, k1 : Key<K1>, k1_eq : (K1, K1) -> Bool, k2 : Key<K2>, k2_eq : (K2, K2) -> Bool, k3 : Key<K3>, k3_eq : (K3, K3) -> Bool ) : (Trie3D<K1, K2, K3, V>, ?V)",
      "public func removeThen<K, V, X>( t : Trie<K, V>, k : Key<K>, k_eq : (K, K) -> Bool, success : (Trie<K, V>, V) -> X, fail : () -> X ) : X",
      "public func replace<K, V>(t : Trie<K, V>, k : Key<K>, k_eq : (K, K) -> Bool, v : ?V) : (Trie<K, V>, ?V)",
      "public func replaceThen<K, V, X>( t : Trie<K, V>, k : Key<K>, k_eq : (K, K) -> Bool, v2 : V, success : (Trie<K, V>, V) -> X, fail : () -> X ) : X",
      "public func size<K, V>(t : Trie<K, V>) : Nat",
      "public func some<K, V>(t : Trie<K, V>, f : (K, V) -> Bool) : Bool",
      "public func toArray<K, V, W>(t : Trie<K, V>, f : (K, V) -> W) : [W]"
    ]
  },
  {
    "name": "deprecated/TrieMap",
    "exports": [
      "public func clone<K, V>( map : TrieMap<K, V>, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash ) : TrieMap<K, V>",
      "public func fromEntries<K, V>( entries : I.Iter<(K, V)>, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash ) : TrieMap<K, V>",
      "public func map<K, V1, V2>( map : TrieMap<K, V1>, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash, f : (K, V1) -> V2 ) : TrieMap<K, V2>",
      "public func mapFilter<K, V1, V2>( map : TrieMap<K, V1>, keyEq : (K, K) -> Bool, keyHash : K -> Hash.Hash, f : (K, V1) -> ?V2 ) : TrieMap<K, V2>",
      "public class TrieMap<K, V>(isEq : (K, K) -> Bool, hashOf : K -> Hash.Hash)"
    ]
  },
  {
    "name": "deprecated/TrieSet",
    "exports": [
      "public func contains<T>(s : Set<T>, x : T, xh : Hash, eq : (T, T) -> Bool) : Bool",
      "public func delete<T>(s : Set<T>, x : T, xh : Hash, eq : (T, T) -> Bool) : Set<T>",
      "public func diff<T>(s1 : Set<T>, s2 : Set<T>, eq : (T, T) -> Bool) : Set<T>",
      "public func empty<T>() : Set<T>",
      "public func equal<T>(s1 : Set<T>, s2 : Set<T>, eq : (T, T) -> Bool) : Bool",
      "public func fromArray<T>(arr : [T], elemHash : T -> Hash, eq : (T, T) -> Bool) : Set<T>",
      "public func intersect<T>(s1 : Set<T>, s2 : Set<T>, eq : (T, T) -> Bool) : Set<T>",
      "public func isEmpty<T>(s : Set<T>) : Bool",
      "public func isSubset<T>(s1 : Set<T>, s2 : Set<T>, eq : (T, T) -> Bool) : Bool",
      "public func mem<T>(s : Set<T>, x : T, xh : Hash, eq : (T, T) -> Bool) : Bool",
      "public func put<T>(s : Set<T>, x : T, xh : Hash, eq : (T, T) -> Bool) : Set<T>",
      "public func size<T>(s : Set<T>) : Nat",
      "public func toArray<T>(s : Set<T>) : [T]",
      "public func union<T>(s1 : Set<T>, s2 : Set<T>, eq : (T, T) -> Bool) : Set<T>"
    ]
  },
  {
    "name": "immutable/Map",
    "exports": [
      "public func add<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : Map<K, V>",
      "public func all<K, V>(map : Map<K, V>, pred : (K, V) -> Bool) : Bool",
      "public func any<K, V>(map : Map<K, V>, pred : (K, V) -> Bool) : Bool",
      "public func assertValid<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order) : ()",
      "public func containsKey<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : Bool",
      "public func delete<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : Map<K, V>",
      "public func empty<K, V>() : Map<K, V>",
      "public func entries<K, V>(map : Map<K, V>) : Iter.Iter<(K, V)>",
      "public func filterMap<K, V1, V2>(map : Map<K, V1>, f : (K, V1) -> ?V2) : Map<K, V2>",
      "public func foldLeft<K, V, A>( map : Map<K, V>, base : A, combine : (A, K, V) -> A ) : A",
      "public func foldRight<K, V, A>( map : Map<K, V>, base : A, combine : (K, V, A) -> A ) : A",
      "public func fromIter<K, V>(iter : Iter.Iter<(K, V)>, compare : (K, K) -> Order.Order) : Map<K, V>",
      "public func get<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : ?V",
      "public func isEmpty<K, V>(map : Map<K, V>) : Bool",
      "public func keys<K, V>(map : Map<K, V>) : Iter.Iter<K>",
      "public func map<K, V1, V2>(map : Map<K, V1>, f : (K, V1) -> V2) : Map<K, V2>",
      "public func maxEntry<K, V>(map : Map<K, V>) : ?(K, V)",
      "public func minEntry<K, V>(map : Map<K, V>) : ?(K, V)",
      "public func put<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K, value : V) : (Map<K, V>, ?V)",
      "public func reverseEntries<K, V>(map : Map<K, V>) : Iter.Iter<(K, V)>",
      "public func size<K, V>(map : Map<K, V>) : Nat",
      "public func take<K, V>(map : Map<K, V>, compare : (K, K) -> Order.Order, key : K) : (Map<K, V>, ?V)",
      "public func toText<K, V>(set : Map<K, V>, kf : K -> Text, vf : V -> Text) : Text",
      "public func values<K, V>(map : Map<K, V>) : Iter.Iter<V>"
    ]
  },
  {
    "name": "immutable/Queue",
    "exports": [
      "public func all<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(queue : Queue<T>, predicate : T -> Bool) : Bool",
      "public func compare<T>(queue1 : Queue<T>, queue2 : Queue<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(queue : Queue<T>, item : T) : Bool",
      "public func empty<T>() : Queue<T>",
      "public func equal<T>(queue1 : Queue<T>, queue2 : Queue<T>) : Bool",
      "public func filter<T>(queue : Queue<T>, f : T -> Bool) : Queue<T>",
      "public func filterMap<T, U>(queue : Queue<T>, f : T -> ?U) : Queue<U>",
      "public func forEach<T>(queue : Queue<T>, f : T -> ())",
      "public func fromIter<T>(iter : Iter.Iter<T>) : Queue<T>",
      "public func isEmpty<T>(queue : Queue<T>) : Bool",
      "public func map<T1, T2>(queue : Queue<T1>, f : T1 -> T2) : Queue<T2>",
      "public func peekBack<T>(queue : Queue<T>) : ?T",
      "public func peekFront<T>(queue : Queue<T>) : ?T",
      "public func popBack<T>(queue : Queue<T>) : ?(Queue<T>, T)",
      "public func popFront<T>(queue : Queue<T>) : ?(T, Queue<T>)",
      "public func pushBack<T>(queue : Queue<T>, element : T) : Queue<T>",
      "public func pushFront<T>(queue : Queue<T>, element : T) : Queue<T>",
      "public func singleton<T>(item : T) : Queue<T>",
      "public func size<T>(queue : Queue<T>) : Nat",
      "public func toText<T>(queue : Queue<T>, f : T -> Text) : Text",
      "public func values<T>(queue : Queue<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "immutable/Set",
    "exports": [
      "public func add<T>(set : Set<T>, compare : (T, T) -> Order.Order, item : T) : Set<T>",
      "public func all<T>(set : Set<T>, pred : T -> Bool) : Bool",
      "public func any<T>(set : Set<T>, pred : T -> Bool) : Bool",
      "public func assertValid<T>(set : Set<T>) : ()",
      "public func compare<T>(set1 : Set<T>, set2 : Set<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func contains<T>(set : Set<T>, compare : (T, T) -> Order.Order, item : T) : Bool",
      "public func delete<T>(set : Set<T>, compare : (T, T) -> Order.Order, item : T) : Set<T>",
      "public func diff<T>(set1 : Set<T>, set2 : Set<T>) : Set<T>",
      "public func empty<T>() : Set<T>",
      "public func equal<T>(set1 : Set<T>, set2 : Set<T>, equal : (T, T) -> Bool) : Bool",
      "public func filter<T>(set : Set<T>, compare : (T, T) -> Order.Order, f : T -> Bool) : Set<T>",
      "public func filterMap<T1, T2>(set : Set<T1>, compare : (T2, T2) -> Order.Order, f : T1 -> ?T2) : Set<T2>",
      "public func foldLeft<T, A>( set : Set<T>, base : A, combine : (A, T) -> A ) : A",
      "public func foldRight<T, A>( set : Set<T>, base : A, combine : (A, T) -> A ) : A",
      "public func forEach<T>(set : Set<T>, f : T -> ())",
      "public func fromIter<T>(iter : Iter.Iter<T>, compare : (T, T) -> Order.Order) : Set<T>",
      "public func intersect<T>(set1 : Set<T>, set2 : Set<T>) : Set<T>",
      "public func isEmpty<T>(set : Set<T>) : Bool",
      "public func isSubset<T>(set1 : Set<T>, set2 : Set<T>) : Bool",
      "public func map<T1, T2>(set : Set<T1>, compare : (T2, T2) -> Order.Order, f : T1 -> T2) : Set<T2>",
      "public func max<T>(set : Set<T>) : ?T",
      "public func min<T>(set : Set<T>) : ?T",
      "public func reverseValues<T>(set : Set<T>) : Iter.Iter<T>",
      "public func singleton<T>(item : T) : Set<T>",
      "public func size<T>(set : Set<T>) : Nat",
      "public func toText<T>(set : Set<T>, f : T -> Text) : Text",
      "public func union<T>(set1 : Set<T>, set2 : Set<T>) : Set<T>",
      "public func values<T>(set : Set<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "immutable/Stack",
    "exports": [
      "public func all<T>(stack : Stack<T>, f : T -> Bool) : Bool",
      "public func any<T>(stack : Stack<T>, f : T -> Bool) : Bool",
      "public func chunks<T>(stack : Stack<T>, n : Nat) : Stack<Stack<T>>",
      "public func compare<T>(stack1 : Stack<T>, stack2 : Stack<T>, compare : (T, T) -> Order.Order) : Order.Order",
      "public func concat<T>(stack1 : Stack<T>, stack2 : Stack<T>) : Stack<T>",
      "public func contains<T>(stack : Stack<T>, item : T) : Bool",
      "public func drop<T>(stack : Stack<T>, n : Nat) : Stack<T>",
      "public func empty<T>() : Stack<T>",
      "public func filter<T>(stack : Stack<T>, f : T -> Bool) : Stack<T>",
      "public func filterMap<T, U>(stack : Stack<T>, f : T -> ?U) : Stack<U>",
      "public func find<T>(stack : Stack<T>, f : T -> Bool) : ?T",
      "public func flatten<T>(stack : Iter.Iter<Stack<T>>) : Stack<T>",
      "public func foldLeft<T, A>(stack : Stack<T>, base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(stack : Stack<T>, base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(stack : Stack<T>, f : T -> ())",
      "public func fromArray<T>(array : [T]) : Stack<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>) : Stack<T>",
      "public func fromVarArray<T>(array : [var T]) : Stack<T>",
      "public func generate<T>(n : Nat, f : Nat -> T) : Stack<T>",
      "public func get<T>(stack : Stack<T>, n : Nat) : ?T",
      "public func isEmpty<T>(stack : Stack<T>) : Bool",
      "public func last<T>(stack : Stack<T>) : ?T",
      "public func map<T1, T2>(stack : Stack<T1>, f : T1 -> T2) : Stack<T2>",
      "public func mapResult<T, R, E>(stack : Stack<T>, f : T -> Result.Result<R, E>) : Result.Result<Stack<R>, E>",
      "public func merge<T>(stack1 : Stack<T>, stack2 : Stack<T>, lessThanOrEqual : (T, T) -> Bool) : Stack<T>",
      "public func partition<T>(stack : Stack<T>, f : T -> Bool) : (Stack<T>, Stack<T>)",
      "public func pop<T>(stack : Stack<T>) : (?T, Stack<T>)",
      "public func push<T>(stack : Stack<T>, item : T) : Stack<T>",
      "public func repeat<T>(item : T, n : Nat) : Stack<T>",
      "public func reverse<T>(stack : Stack<T>) : Stack<T>",
      "public func singleton<T>(item : T) : Stack<T>",
      "public func size<T>(stack : Stack<T>) : Nat",
      "public func split<T>(stack : Stack<T>, n : Nat) : (Stack<T>, Stack<T>)",
      "public func take<T>(stack : Stack<T>, n : Nat) : Stack<T>",
      "public func toArray<T>(stack : Stack<T>) : [T]",
      "public func toText<T>(stack : Stack<T>, f : T -> Text) : Text",
      "public func toVarArray<T>(stack : Stack<T>) : [var T]",
      "public func values<T>(stack : Stack<T>) : Iter.Iter<T>",
      "public func zip<T, U>(stack1 : Stack<T>, stack2 : Stack<U>) : Stack<(T, U)>",
      "public func zipWith<T, U, V>(stack1 : Stack<T>, stack2 : Stack<U>, f : (T, U) -> V) : Stack<V>"
    ]
  }
]