[
  {
    "name": "Array",
    "exports": [
      "public func all<T>(self : [T], predicate : T -> Bool) : Bool",
      "public func any<T>(self : [T], predicate : T -> Bool) : Bool",
      "public func binarySearch<T>(self : [T], compare : (implicit : (T, T) -> Order.Order), element : T) : { #found : Nat; #insertionIndex : Nat }",
      "public func compare<T>(self : [T], other : [T], compare : (implicit : (T, T) -> Order.Order)) : Order.Order",
      "public func concat<T>(self : [T], other : [T]) : [T]",
      "public func empty<T>() : [T]",
      "public func enumerate<T>(self : [T]) : Types.Iter<(Nat, T)>",
      "public func equal<T>(self : [T], other : [T], equal : (implicit : (T, T) -> Bool)) : Bool",
      "public func filter<T>(self : [T], f : T -> Bool) : [T]",
      "public func filterMap<T, R>(self : [T], f : T -> ?R) : [R]",
      "public func find<T>(self : [T], predicate : T -> Bool) : ?T",
      "public func findIndex<T>(self : [T], predicate : T -> Bool) : ?Nat",
      "public func flatMap<T, R>(self : [T], k : T -> Types.Iter<R>) : [R]",
      "public func flatten<T>(self : [[T]]) : [T]",
      "public func foldLeft<T, A>(self : [T], base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(self : [T], base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(self : [T], f : T -> ())",
      "public func fromIter<T>(iter : Types.Iter<T>) : [T]",
      "public func fromVarArray<T>(varArray : [var T]) : [T]",
      "public func indexOf<T>(self : [T], equal : (implicit : (T, T) -> Bool), element : T) : ?Nat",
      "public func isEmpty<T>(self : [T]) : Bool",
      "public func join<T>(self : Types.Iter<[T]>) : [T]",
      "public func keys<T>(self : [T]) : Types.Iter<Nat>",
      "public func lastIndexOf<T>(self : [T], equal : (implicit : (T, T) -> Bool), element : T) : ?Nat",
      "public func map<T, R>(self : [T], f : T -> R) : [R]",
      "public func mapEntries<T, R>(self : [T], f : (T, Nat) -> R) : [R]",
      "public func mapResult<T, R, E>(self : [T], f : T -> Types.Result<R, E>) : Types.Result<[R], E>",
      "public func nextIndexOf<T>(self : [T], equal : (implicit : (T, T) -> Bool), element : T, fromInclusive : Nat) : ?Nat",
      "public func prevIndexOf<T>(self : [T], equal : (implicit : (T, T) -> Bool), element : T, fromExclusive : Nat) : ?Nat",
      "public func range<T>(self : [T], fromInclusive : Int, toExclusive : Int) : Types.Iter<T>",
      "public func repeat<T>(item : T, size : Nat) : [T]",
      "public func reverse<T>(self : [T]) : [T]",
      "public func singleton<T>(element : T) : [T]",
      "public func size<T>(self : [T]) : Nat",
      "public func sliceToArray<T>(self : [T], fromInclusive : Int, toExclusive : Int) : [T]",
      "public func sliceToVarArray<T>(self : [T], fromInclusive : Int, toExclusive : Int) : [var T]",
      "public func sort<T>(self : [T], compare : (implicit : (T, T) -> Order.Order)) : [T]",
      "public func tabulate<T>(size : Nat, generator : Nat -> T) : [T]",
      "public func toText<T>(self : [T], f : (implicit : (toText : T -> Text))) : Text",
      "public func toVarArray<T>(self : [T]) : [var T]",
      "public func values<T>(self : [T]) : Types.Iter<T>"
    ]
  },
  {
    "name": "Blob",
    "exports": [
      "public type Blob",
      "public func compare(self : Blob, other : Blob) : Order.Order",
      "public func empty() : Blob",
      "public func equal(self : Blob, other : Blob) : Bool",
      "public func fromArray(bytes : [Nat8]) : Blob",
      "public func fromVarArray(bytes : [var Nat8]) : Blob",
      "public func greater(self : Blob, other : Blob) : Bool",
      "public func greaterOrEqual(self : Blob, other : Blob) : Bool",
      "public func hash(self : Blob) : Types.Hash",
      "public func isEmpty(self : Blob) : Bool",
      "public func less(self : Blob, other : Blob) : Bool",
      "public func lessOrEqual(self : Blob, other : Blob) : Bool",
      "public func notEqual(self : Blob, other : Blob) : Bool",
      "public func size(self : Blob) : Nat",
      "public func toArray(self : Blob) : [Nat8]",
      "public func toVarArray(self : Blob) : [var Nat8]"
    ]
  },
  {
    "name": "Bool",
    "exports": [
      "public func allValues() : Iter.Iter<Bool>",
      "public type Bool",
      "public func compare(self : Bool, other : Bool) : Order.Order",
      "public func equal(self : Bool, other : Bool) : Bool",
      "public func logicalAnd(self : Bool, other : Bool) : Bool",
      "public func logicalNot(self : Bool) : Bool",
      "public func logicalOr(self : Bool, other : Bool) : Bool",
      "public func logicalXor(self : Bool, other : Bool) : Bool",
      "public func toText(self : Bool) : Text"
    ]
  },
  {
    "name": "CertifiedData",
    "exports": [
      "public let getCertificate : () -> ?Blob",
      "public let set : (data : Blob) -> ()"
    ]
  },
  {
    "name": "Char",
    "exports": [
      "public type Char",
      "public func compare(self : Char, other : Char) : { #less; #equal; #greater }",
      "public func equal(self : Char, other : Char) : Bool",
      "public func fromNat32(nat32 : Nat32) : Char",
      "public func greater(self : Char, other : Char) : Bool",
      "public func greaterOrEqual(self : Char, other : Char) : Bool",
      "public func isAlphabetic(self : Char) : Bool",
      "public func isDigit(self : Char) : Bool",
      "public func isLower(self : Char) : Bool",
      "public func isUpper(self : Char) : Bool",
      "public func isWhitespace(self : Char) : Bool",
      "public func less(self : Char, other : Char) : Bool",
      "public func lessOrEqual(self : Char, other : Char) : Bool",
      "public func notEqual(self : Char, other : Char) : Bool",
      "public func toNat32(self : Char) : Nat32",
      "public func toText(self : Char) : Text"
    ]
  },
  {
    "name": "Cycles",
    "exports": [
      "public let accept : <system>(amount : Nat) -> (accepted : Nat)",
      "public let available : () -> (amount : Nat)",
      "public let balance : () -> (amount : Nat)",
      "public let burn : <system>(amount : Nat) -> (burned : Nat)",
      "public let refunded : () -> (amount : Nat)"
    ]
  },
  {
    "name": "Debug",
    "exports": [
      "public func print(text : Text)",
      "public func todo() : None"
    ]
  },
  {
    "name": "Error",
    "exports": [
      "public func code(self : Error) : ErrorCode",
      "public type Error",
      "public type ErrorCode",
      "public func isCleanReject(self : Error) : Bool",
      "public func isRetryPossible(self : Error) : Bool",
      "public func message(self : Error) : Text",
      "public func reject(message : Text) : Error"
    ]
  },
  {
    "name": "Float",
    "exports": [
      "public func abs(self : Float) : Float",
      "public func add(self : Float, other : Float) : Float",
      "public func arccos(self : Float) : Float",
      "public func arcsin(self : Float) : Float",
      "public func arctan(self : Float) : Float",
      "public func arctan2(self : Float, other : Float) : Float",
      "public func ceil(self : Float) : Float",
      "public func compare(self : Float, other : Float) : Order.Order",
      "public func copySign(self : Float, other : Float) : Float",
      "public func cos(self : Float) : Float",
      "public func div(self : Float, other : Float) : Float",
      "public let e : Float",
      "public func equal(self : Float, other : Float, epsilon : Float) : Bool",
      "public func exp(self : Float) : Float",
      "public type Float",
      "public func floor(self : Float) : Float",
      "public func format(self : Float, fmt : { #fix : Nat8; #exp : Nat8; #gen : Nat8; #exact }) : Text",
      "public func fromInt(x : Int) : Float",
      "public func fromInt64(x : Int64) : Float",
      "public func greater(self : Float, other : Float) : Bool",
      "public func greaterOrEqual(self : Float, other : Float) : Bool",
      "public func isNaN(self : Float) : Bool",
      "public func less(self : Float, other : Float) : Bool",
      "public func lessOrEqual(self : Float, other : Float) : Bool",
      "public let log : (x : Float) -> Float",
      "public func max(self : Float, other : Float) : Float",
      "public func min(self : Float, other : Float) : Float",
      "public func mul(self : Float, other : Float) : Float",
      "public func nearest(self : Float) : Float",
      "public func neg(self : Float) : Float",
      "public func notEqual(self : Float, other : Float, epsilon : Float) : Bool",
      "public let pi : Float",
      "public func pow(self : Float, other : Float) : Float",
      "public func rem(self : Float, other : Float) : Float",
      "public func sin(self : Float) : Float",
      "public func sqrt(self : Float) : Float",
      "public func sub(self : Float, other : Float) : Float",
      "public func tan(self : Float) : Float",
      "public func toInt(self : Float) : Int",
      "public func toInt64(self : Float) : Int64",
      "public func toText(self : Float) : Text",
      "public func trunc(self : Float) : Float"
    ]
  },
  {
    "name": "Func",
    "exports": [
      "public func compose<A, B, C>(f : B -> C, g : A -> B) : A -> C",
      "public func const<A, B>(x : A) : B -> A",
      "public func identity<A>(x : A) : A"
    ]
  },
  {
    "name": "Int",
    "exports": [
      "public func abs(x : Int) : Nat",
      "public func add(self : Int, other : Int) : Int",
      "public func compare(self : Int, other : Int) : Order.Order",
      "public func div(self : Int, other : Int) : Int",
      "public func equal(self : Int, other : Int) : Bool",
      "public func fromNat(nat : Nat) : Int",
      "public func fromText(text : Text) : ?Int",
      "public func greater(self : Int, other : Int) : Bool",
      "public func greaterOrEqual(self : Int, other : Int) : Bool",
      "public type Int",
      "public func less(self : Int, other : Int) : Bool",
      "public func lessOrEqual(x : Int, y : Int) : Bool",
      "public func max(self : Int, other : Int) : Int",
      "public func min(self : Int, other : Int) : Int",
      "public func mul(self : Int, other : Int) : Int",
      "public func neg(self : Int) : Int",
      "public func notEqual(self : Int, other : Int) : Bool",
      "public func pow(self : Int, other : Int) : Int",
      "public func range(self : Int, toExclusive : Int) : Iter.Iter<Int>",
      "public func rangeBy(self : Int, toExclusive : Int, step : Int) : Iter.Iter<Int>",
      "public func rangeByInclusive(self : Int, to : Int, step : Int) : Iter.Iter<Int>",
      "public func rangeInclusive(self : Int, to : Int) : Iter.Iter<Int>",
      "public func rem(self : Int, other : Int) : Int",
      "public func sub(self : Int, other : Int) : Int",
      "public func toFloat(self : Int) : Float",
      "public func toInt(self : Text) : ?Int",
      "public func toNat(self : Int) : Nat",
      "public func toText(self : Int) : Text"
    ]
  },
  {
    "name": "Int16",
    "exports": [
      "public func abs(self : Int16) : Int16",
      "public func add(self : Int16, other : Int16) : Int16",
      "public func addWrap(self : Int16, other : Int16) : Int16",
      "public func allValues() : Iter.Iter<Int16>",
      "public func bitand(self : Int16, other : Int16) : Int16",
      "public func bitclear(self : Int16, p : Nat) : Int16",
      "public func bitcountLeadingZero(self : Int16) : Int16",
      "public func bitcountNonZero(self : Int16) : Int16",
      "public func bitcountTrailingZero(self : Int16) : Int16",
      "public func bitflip(self : Int16, p : Nat) : Int16",
      "public func bitnot(self : Int16) : Int16",
      "public func bitor(self : Int16, other : Int16) : Int16",
      "public func bitrotLeft(self : Int16, other : Int16) : Int16",
      "public func bitrotRight(self : Int16, other : Int16) : Int16",
      "public func bitset(self : Int16, p : Nat) : Int16",
      "public func bitshiftLeft(self : Int16, other : Int16) : Int16",
      "public func bitshiftRight(self : Int16, other : Int16) : Int16",
      "public func bittest(self : Int16, p : Nat) : Bool",
      "public func bitxor(self : Int16, other : Int16) : Int16",
      "public func compare(self : Int16, other : Int16) : Order.Order",
      "public func div(self : Int16, other : Int16) : Int16",
      "public func equal(self : Int16, other : Int16) : Bool",
      "public func explode(self : Int16) : (msb : Nat8, lsb : Nat8)",
      "public let fromInt : Int -> Int16",
      "public let fromInt32 : Int32 -> Int16",
      "public let fromInt8 : Int8 -> Int16",
      "public let fromIntWrap : Int -> Int16",
      "public let fromNat16 : Nat16 -> Int16",
      "public func greater(self : Int16, other : Int16) : Bool",
      "public func greaterOrEqual(self : Int16, other : Int16) : Bool",
      "public type Int16",
      "public func less(self : Int16, other : Int16) : Bool",
      "public func lessOrEqual(self : Int16, other : Int16) : Bool",
      "public func max(self : Int16, other : Int16) : Int16",
      "public let maxValue : Int16",
      "public func min(self : Int16, other : Int16) : Int16",
      "public let minValue : Int16",
      "public func mul(self : Int16, other : Int16) : Int16",
      "public func mulWrap(self : Int16, other : Int16) : Int16",
      "public func neg(self : Int16) : Int16",
      "public func notEqual(self : Int16, other : Int16) : Bool",
      "public func pow(self : Int16, other : Int16) : Int16",
      "public func powWrap(self : Int16, other : Int16) : Int16",
      "public func range(self : Int16, toExclusive : Int16) : Iter.Iter<Int16>",
      "public func rangeInclusive(self : Int16, to : Int16) : Iter.Iter<Int16>",
      "public func rem(self : Int16, other : Int16) : Int16",
      "public func sub(self : Int16, other : Int16) : Int16",
      "public func subWrap(self : Int16, other : Int16) : Int16",
      "public func toInt(self : Int16) : Int",
      "public func toInt32(self : Int16) : Int32",
      "public func toInt8(self : Int16) : Int8",
      "public func toNat16(self : Int16) : Nat16",
      "public func toText(self : Int16) : Text"
    ]
  },
  {
    "name": "Int32",
    "exports": [
      "public func abs(self : Int32) : Int32",
      "public func add(self : Int32, other : Int32) : Int32",
      "public func addWrap(self : Int32, other : Int32) : Int32",
      "public func allValues() : Iter.Iter<Int32>",
      "public func bitand(self : Int32, other : Int32) : Int32",
      "public func bitclear(self : Int32, p : Nat) : Int32",
      "public func bitcountLeadingZero(self : Int32) : Int32",
      "public func bitcountNonZero(self : Int32) : Int32",
      "public func bitcountTrailingZero(self : Int32) : Int32",
      "public func bitflip(self : Int32, p : Nat) : Int32",
      "public func bitnot(self : Int32) : Int32",
      "public func bitor(self : Int32, other : Int32) : Int32",
      "public func bitrotLeft(self : Int32, other : Int32) : Int32",
      "public func bitrotRight(self : Int32, other : Int32) : Int32",
      "public func bitset(self : Int32, p : Nat) : Int32",
      "public func bitshiftLeft(self : Int32, other : Int32) : Int32",
      "public func bitshiftRight(self : Int32, other : Int32) : Int32",
      "public func bittest(self : Int32, p : Nat) : Bool",
      "public func bitxor(self : Int32, other : Int32) : Int32",
      "public func compare(self : Int32, other : Int32) : Order.Order",
      "public func div(self : Int32, other : Int32) : Int32",
      "public func equal(self : Int32, other : Int32) : Bool",
      "public func explode(self : Int32) : (msb : Nat8, Nat8, Nat8, lsb : Nat8)",
      "public let fromInt : Int -> Int32",
      "public let fromInt16 : Int16 -> Int32",
      "public let fromInt64 : Int64 -> Int32",
      "public let fromIntWrap : Int -> Int32",
      "public let fromNat32 : Nat32 -> Int32",
      "public func greater(self : Int32, other : Int32) : Bool",
      "public func greaterOrEqual(self : Int32, other : Int32) : Bool",
      "public type Int32",
      "public func less(self : Int32, other : Int32) : Bool",
      "public func lessOrEqual(self : Int32, other : Int32) : Bool",
      "public func max(self : Int32, other : Int32) : Int32",
      "public let maxValue : Int32",
      "public func min(self : Int32, other : Int32) : Int32",
      "public let minValue : Int32",
      "public func mul(self : Int32, other : Int32) : Int32",
      "public func mulWrap(self : Int32, other : Int32) : Int32",
      "public func neg(self : Int32) : Int32",
      "public func notEqual(self : Int32, other : Int32) : Bool",
      "public func pow(self : Int32, other : Int32) : Int32",
      "public func powWrap(self : Int32, other : Int32) : Int32",
      "public func range(self : Int32, toExclusive : Int32) : Iter.Iter<Int32>",
      "public func rangeInclusive(self : Int32, to : Int32) : Iter.Iter<Int32>",
      "public func rem(self : Int32, other : Int32) : Int32",
      "public func sub(self : Int32, other : Int32) : Int32",
      "public func subWrap(self : Int32, other : Int32) : Int32",
      "public func toInt(self : Int32) : Int",
      "public func toInt16(self : Int32) : Int16",
      "public func toInt64(self : Int32) : Int64",
      "public func toNat32(self : Int32) : Nat32",
      "public func toText(self : Int32) : Text"
    ]
  },
  {
    "name": "Int64",
    "exports": [
      "public func abs(self : Int64) : Int64",
      "public func add(self : Int64, other : Int64) : Int64",
      "public func addWrap(self : Int64, other : Int64) : Int64",
      "public func allValues() : Iter.Iter<Int64>",
      "public func bitand(self : Int64, other : Int64) : Int64",
      "public func bitclear(self : Int64, p : Nat) : Int64",
      "public func bitcountLeadingZero(self : Int64) : Int64",
      "public func bitcountNonZero(self : Int64) : Int64",
      "public func bitcountTrailingZero(self : Int64) : Int64",
      "public func bitflip(self : Int64, p : Nat) : Int64",
      "public func bitnot(self : Int64) : Int64",
      "public func bitor(self : Int64, other : Int64) : Int64",
      "public func bitrotLeft(self : Int64, other : Int64) : Int64",
      "public func bitrotRight(self : Int64, other : Int64) : Int64",
      "public func bitset(self : Int64, p : Nat) : Int64",
      "public func bitshiftLeft(self : Int64, other : Int64) : Int64",
      "public func bitshiftRight(self : Int64, other : Int64) : Int64",
      "public func bittest(self : Int64, p : Nat) : Bool",
      "public func bitxor(self : Int64, other : Int64) : Int64",
      "public func compare(self : Int64, other : Int64) : Order.Order",
      "public func div(self : Int64, other : Int64) : Int64",
      "public func equal(self : Int64, other : Int64) : Bool",
      "public func explode(self : Int64) : (msb : Nat8, Nat8, Nat8, Nat8, Nat8, Nat8, Nat8, lsb : Nat8)",
      "public let fromInt : Int -> Int64",
      "public let fromInt32 : Int32 -> Int64",
      "public let fromIntWrap : Int -> Int64",
      "public let fromNat64 : Nat64 -> Int64",
      "public func greater(self : Int64, other : Int64) : Bool",
      "public func greaterOrEqual(self : Int64, other : Int64) : Bool",
      "public type Int64",
      "public func less(self : Int64, other : Int64) : Bool",
      "public func lessOrEqual(self : Int64, other : Int64) : Bool",
      "public func max(self : Int64, other : Int64) : Int64",
      "public let maxValue : Int64",
      "public func min(self : Int64, other : Int64) : Int64",
      "public let minValue : Int64",
      "public func mul(self : Int64, other : Int64) : Int64",
      "public func mulWrap(self : Int64, other : Int64) : Int64",
      "public func neg(self : Int64) : Int64",
      "public func notEqual(self : Int64, other : Int64) : Bool",
      "public func pow(self : Int64, other : Int64) : Int64",
      "public func powWrap(self : Int64, other : Int64) : Int64",
      "public func range(self : Int64, toExclusive : Int64) : Iter.Iter<Int64>",
      "public func rangeInclusive(self : Int64, to : Int64) : Iter.Iter<Int64>",
      "public func rem(self : Int64, other : Int64) : Int64",
      "public func sub(self : Int64, other : Int64) : Int64",
      "public func subWrap(self : Int64, other : Int64) : Int64",
      "public func toInt(self : Int64) : Int",
      "public func toInt32(self : Int64) : Int32",
      "public func toNat64(self : Int64) : Nat64",
      "public func toText(self : Int64) : Text"
    ]
  },
  {
    "name": "Int8",
    "exports": [
      "public func abs(self : Int8) : Int8",
      "public func add(self : Int8, other : Int8) : Int8",
      "public func addWrap(self : Int8, other : Int8) : Int8",
      "public func allValues() : Iter.Iter<Int8>",
      "public func bitand(self : Int8, other : Int8) : Int8",
      "public func bitclear(self : Int8, p : Nat) : Int8",
      "public func bitcountLeadingZero(self : Int8) : Int8",
      "public func bitcountNonZero(self : Int8) : Int8",
      "public func bitcountTrailingZero(self : Int8) : Int8",
      "public func bitflip(self : Int8, p : Nat) : Int8",
      "public func bitnot(self : Int8) : Int8",
      "public func bitor(self : Int8, other : Int8) : Int8",
      "public func bitrotLeft(self : Int8, other : Int8) : Int8",
      "public func bitrotRight(self : Int8, other : Int8) : Int8",
      "public func bitset(self : Int8, p : Nat) : Int8",
      "public func bitshiftLeft(self : Int8, other : Int8) : Int8",
      "public func bitshiftRight(self : Int8, other : Int8) : Int8",
      "public func bittest(self : Int8, p : Nat) : Bool",
      "public func bitxor(self : Int8, other : Int8) : Int8",
      "public func compare(self : Int8, other : Int8) : Order.Order",
      "public func div(self : Int8, other : Int8) : Int8",
      "public func equal(self : Int8, other : Int8) : Bool",
      "public let fromInt : Int -> Int8",
      "public let fromInt16 : Int16 -> Int8",
      "public let fromIntWrap : Int -> Int8",
      "public let fromNat8 : Nat8 -> Int8",
      "public func greater(self : Int8, other : Int8) : Bool",
      "public func greaterOrEqual(self : Int8, other : Int8) : Bool",
      "public type Int8",
      "public func less(self : Int8, other : Int8) : Bool",
      "public func lessOrEqual(self : Int8, other : Int8) : Bool",
      "public func max(self : Int8, other : Int8) : Int8",
      "public let maxValue : Int8",
      "public func min(self : Int8, other : Int8) : Int8",
      "public let minValue : Int8",
      "public func mul(self : Int8, other : Int8) : Int8",
      "public func mulWrap(self : Int8, other : Int8) : Int8",
      "public func neg(self : Int8) : Int8",
      "public func notEqual(self : Int8, other : Int8) : Bool",
      "public func pow(self : Int8, other : Int8) : Int8",
      "public func powWrap(self : Int8, other : Int8) : Int8",
      "public func range(self : Int8, toExclusive : Int8) : Iter.Iter<Int8>",
      "public func rangeInclusive(self : Int8, to : Int8) : Iter.Iter<Int8>",
      "public func rem(self : Int8, other : Int8) : Int8",
      "public func sub(self : Int8, other : Int8) : Int8",
      "public func subWrap(self : Int8, other : Int8) : Int8",
      "public func toInt(self : Int8) : Int",
      "public func toInt16(self : Int8) : Int16",
      "public func toNat8(self : Int8) : Nat8",
      "public func toText(self : Int8) : Text"
    ]
  },
  {
    "name": "InternetComputer",
    "exports": [
      "public let call : (canister : Principal, name : Text, data : Blob) -> async (reply : Blob)",
      "public func countInstructions(comp : () -> ()) : Nat64",
      "public let isReplicated : () -> Bool",
      "public let performanceCounter : (counter : Nat32) -> (value : Nat64)",
      "public func replyDeadline() : ?Nat"
    ]
  },
  {
    "name": "Iter",
    "exports": [
      "public func all<T>(self : Iter<T>, f : T -> Bool) : Bool",
      "public func any<T>(self : Iter<T>, f : T -> Bool) : Bool",
      "public func concat<T>(self : Iter<T>, other : Iter<T>) : Iter<T>",
      "public func contains<T>(self : Iter<T>, equal : (implicit : (T, T) -> Bool), value : T) : Bool",
      "public func drop<T>(self : Iter<T>, n : Nat) : Iter<T>",
      "public func dropWhile<T>(self : Iter<T>, f : T -> Bool) : Iter<T>",
      "public func empty<T>() : Iter<T>",
      "public func enumerate<T>(self : Iter<T>) : Iter<(Nat, T)>",
      "public func filter<T>(self : Iter<T>, f : T -> Bool) : Iter<T>",
      "public func filterMap<T, R>(self : Iter<T>, f : T -> ?R) : Iter<R>",
      "public func find<T>(self : Iter<T>, f : T -> Bool) : ?T",
      "public func findIndex<T>(self : Iter<T>, predicate : T -> Bool) : ?Nat",
      "public func flatMap<T, R>(self : Iter<T>, f : T -> Iter<R>) : Iter<R>",
      "public func flatten<T>(self : Iter<Iter<T>>) : Iter<T>",
      "public func foldLeft<T, R>(self : Iter<T>, initial : R, combine : (R, T) -> R) : R",
      "public func foldRight<T, R>(self : Iter<T>, initial : R, combine : (T, R) -> R) : R",
      "public func forEach<T>( self : Iter<T>, f : (T) -> () )",
      "public func fromArray<T>(array : [T]) : Iter<T>",
      "public func fromVarArray<T>(array : [var T]) : Iter<T>",
      "public func infinite<T>(item : T) : Iter<T>",
      "public type Iter<T>",
      "public func map<T, R>(self : Iter<T>, f : T -> R) : Iter<R>",
      "public func max<T>(self : Iter<T>, compare : (implicit : (T, T) -> Order.Order)) : ?T",
      "public func min<T>(self : Iter<T>, compare : (implicit : (T, T) -> Order.Order)) : ?T",
      "public func reduce<T>(self : Iter<T>, combine : (T, T) -> T) : ?T",
      "public func repeat<T>(item : T, count : Nat) : Iter<T>",
      "public func reverse<T>(self : Iter<T>) : Iter<T>",
      "public func scanLeft<T, R>(self : Iter<T>, initial : R, combine : (R, T) -> R) : Iter<R>",
      "public func scanRight<T, R>(self : Iter<T>, initial : R, combine : (T, R) -> R) : Iter<R>",
      "public func singleton<T>(value : T) : Iter<T>",
      "public func size<T>(self : Iter<T>) : Nat",
      "public func sort<T>(self : Iter<T>, compare : (implicit : (T, T) -> Order.Order)) : Iter<T>",
      "public func step<T>(self : Iter<T>, n : Nat) : Iter<T>",
      "public func take<T>(self : Iter<T>, n : Nat) : Iter<T>",
      "public func takeWhile<T>(self : Iter<T>, f : T -> Bool) : Iter<T>",
      "public func toArray<T>(self : Iter<T>) : [T]",
      "public func toVarArray<T>(self : Iter<T>) : [var T]",
      "public func unfold<T, S>(initial : S, step : S -> ?(T, S)) : Iter<T>",
      "public func zip<A, B>(self : Iter<A>, other : Iter<B>) : Iter<(A, B)>",
      "public func zip3<A, B, C>(self : Iter<A>, other : Iter<B>, other2 : Iter<C>) : Iter<(A, B, C)>",
      "public func zipWith<A, B, R>(self : Iter<A>, other : Iter<B>, f : (A, B) -> R) : Iter<R>",
      "public func zipWith3<A, B, C, R>(self : Iter<A>, other : Iter<B>, other2 : Iter<C>, f : (A, B, C) -> R) : Iter<R>"
    ]
  },
  {
    "name": "List",
    "exports": [
      "public func add<T>(self : List<T>, element : T)",
      "public func addAll<T>(self : List<T>, iter : Iter.Iter<T>)",
      "public func addRepeat<T>(self : List<T>, initValue : T, count : Nat)",
      "public func all<T>(self : List<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(self : List<T>, predicate : T -> Bool) : Bool",
      "public func at<T>(self : List<T>, index : Nat) : T",
      "public func binarySearch<T>(self : List<T>, compare : (implicit : (T, T) -> Order.Order), element : T) : { #found : Nat; #insertionIndex : Nat }",
      "public func clear<T>(self : List<T>)",
      "public func clone<T>(self : List<T>) : List<T>",
      "public func compare<T>(self : List<T>, other : List<T>, compare : (implicit : (T, T) -> Order.Order)) : Order.Order",
      "public func contains<T>(self : List<T>, equal : (implicit : (T, T) -> Bool), element : T) : Bool",
      "public func empty<T>() : List<T>",
      "public func enumerate<T>(self : List<T>) : Iter.Iter<(Nat, T)>",
      "public func equal<T>(self : List<T>, other : List<T>, equal : (implicit : (T, T) -> Bool)) : Bool",
      "public func filter<T>(self : List<T>, predicate : T -> Bool) : List<T>",
      "public func filterMap<T, R>(self : List<T>, f : T -> ?R) : List<R>",
      "public func find<T>(self : List<T>, predicate : T -> Bool) : ?T",
      "public func findIndex<T>(self : List<T>, predicate : T -> Bool) : ?Nat",
      "public func findLastIndex<T>(self : List<T>, predicate : T -> Bool) : ?Nat",
      "public func first<T>(self : List<T>) : ?T",
      "public func foldLeft<A, T>(self : List<T>, base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(self : List<T>, base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(self : List<T>, f : T -> ())",
      "public func forEachEntry<T>(self : List<T>, f : (Nat, T) -> ())",
      "public func fromArray<T>(array : [T]) : List<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>) : List<T>",
      "public func fromPure<T>(pure : PureList.List<T>) : List<T>",
      "public func fromVarArray<T>(array : [var T]) : List<T>",
      "public func get<T>(self : List<T>, index : Nat) : ?T",
      "public func indexOf<T>(self : List<T>, equal : (implicit : (T, T) -> Bool), element : T) : ?Nat",
      "public func isEmpty<T>(self : List<T>) : Bool",
      "public func keys<T>(self : List<T>) : Iter.Iter<Nat>",
      "public func last<T>(self : List<T>) : ?T",
      "public func lastIndexOf<T>(self : List<T>, equal : (implicit : (T, T) -> Bool), element : T) : ?Nat",
      "public type List<T>",
      "public func map<T, R>(self : List<T>, f : T -> R) : List<R>",
      "public func max<T>(self : List<T>, compare : (implicit : (T, T) -> Order.Order)) : ?T",
      "public func min<T>(self : List<T>, compare : (implicit : (T, T) -> Order.Order)) : ?T",
      "public func put<T>(self : List<T>, index : Nat, value : T)",
      "public func removeLast<T>(self : List<T>) : ?T",
      "public func repeat<T>(initValue : T, size : Nat) : List<T>",
      "public func reverse<T>(self : List<T>) : List<T>",
      "public func reverseEnumerate<T>(self : List<T>) : Iter.Iter<(Nat, T)>",
      "public func reverseForEach<T>(self : List<T>, f : T -> ())",
      "public func reverseForEachEntry<T>(self : List<T>, f : (Nat, T) -> ())",
      "public func reverseInPlace<T>(self : List<T>)",
      "public func reverseValues<T>(self : List<T>) : Iter.Iter<T>",
      "public func singleton<T>(element : T) : List<T>",
      "public func size<T>(self : List<T>) : Nat",
      "public func sort<T>(self : List<T>, compare : (implicit : (T, T) -> Types.Order)) : List<T>",
      "public func sortInPlace<T>(self : List<T>, compare : (implicit : (T, T) -> Order.Order))",
      "public func toArray<T>(self : List<T>) : [T]",
      "public func toPure<T>(self : List<T>) : PureList.List<T>",
      "public func toText<T>(self : List<T>, f : (implicit : (toText : T -> Text))) : Text",
      "public func toVarArray<T>(self : List<T>) : [var T]",
      "public func values<T>(self : List<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "Map",
    "exports": [
      "public func add<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K, value : V)",
      "public func all<K, V>(self : Map<K, V>, predicate : (K, V) -> Bool) : Bool",
      "public func any<K, V>(self : Map<K, V>, predicate : (K, V) -> Bool) : Bool",
      "public func assertValid<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order))",
      "public func clear<K, V>(self : Map<K, V>)",
      "public func clone<K, V>(self : Map<K, V>) : Map<K, V>",
      "public func compare<K, V>(self : Map<K, V>, other : Map<K, V>, compareKey : (implicit : (compare : (K, K) -> Order.Order)), compareValue : (implicit : (compare : (V, V) -> Order.Order))) : Order.Order",
      "public func containsKey<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : Bool",
      "public func delete<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : Bool",
      "public func empty<K, V>() : Map<K, V>",
      "public func entries<K, V>(self : Map<K, V>) : Types.Iter<(K, V)>",
      "public func entriesFrom<K, V>( self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K ) : Types.Iter<(K, V)>",
      "public func equal<K, V>(self : Map<K, V>, other : Map<K, V>, compare : (implicit : (K, K) -> Types.Order), equal : (implicit : (V, V) -> Bool)) : Bool",
      "public func filter<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), criterion : (K, V) -> Bool) : Map<K, V>",
      "public func filterMap<K, V1, V2>(self : Map<K, V1>, compare : (implicit : (K, K) -> Order.Order), project : (K, V1) -> ?V2) : Map<K, V2>",
      "public func foldLeft<K, V, A>( self : Map<K, V>, base : A, combine : (A, K, V) -> A ) : A",
      "public func foldRight<K, V, A>( self : Map<K, V>, base : A, combine : (K, V, A) -> A ) : A",
      "public func forEach<K, V>(self : Map<K, V>, operation : (K, V) -> ())",
      "public func fromArray<K, V>(array : [(K, V)], compare : (implicit : (K, K) -> Order.Order)) : Map<K, V>",
      "public func fromIter<K, V>(iter : Types.Iter<(K, V)>, compare : (implicit : (K, K) -> Order.Order)) : Map<K, V>",
      "public func fromPure<K, V>(map : PureMap.Map<K, V>, compare : (implicit : (K, K) -> Order.Order)) : Map<K, V>",
      "public func fromVarArray<K, V>(array : [var (K, V)], compare : (implicit : (K, K) -> Order.Order)) : Map<K, V>",
      "public func get<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : ?V",
      "public func insert<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K, value : V) : Bool",
      "public func isEmpty<K, V>(self : Map<K, V>) : Bool",
      "public func keys<K, V>(self : Map<K, V>) : Types.Iter<K>",
      "public func map<K, V1, V2>(self : Map<K, V1>, project : (K, V1) -> V2) : Map<K, V2>",
      "public type Map<K, V>",
      "public func maxEntry<K, V>(self : Map<K, V>) : ?(K, V)",
      "public func minEntry<K, V>(self : Map<K, V>) : ?(K, V)",
      "public func remove<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K)",
      "public func replace<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K, value : V) : ?V",
      "public func reverseEntries<K, V>(self : Map<K, V>) : Types.Iter<(K, V)>",
      "public func reverseEntriesFrom<K, V>( self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K ) : Types.Iter<(K, V)>",
      "public func singleton<K, V>(key : K, value : V) : Map<K, V>",
      "public func size<K, V>(self : Map<K, V>) : Nat",
      "public func swap<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K, value : V) : ?V",
      "public func take<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : ?V",
      "public func toArray<K, V>(self : Map<K, V>) : [(K, V)]",
      "public func toPure<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order)) : PureMap.Map<K, V>",
      "public func toText<K, V>(self : Map<K, V>, keyFormat : (implicit : (toText : K -> Text)), valueFormat : (implicit : (toText : V -> Text))) : Text",
      "public func toVarArray<K, V>(self : Map<K, V>) : [var (K, V)]",
      "public func values<K, V>(self : Map<K, V>) : Types.Iter<V>"
    ]
  },
  {
    "name": "Nat",
    "exports": [
      "public func add(self : Nat, other : Nat) : Nat",
      "public func allValues() : Iter.Iter<Nat>",
      "public func bitshiftLeft(self : Nat, other : Nat32) : Nat",
      "public func bitshiftRight(self : Nat, other : Nat32) : Nat",
      "public func compare(self : Nat, other : Nat) : Order.Order",
      "public func div(self : Nat, other : Nat) : Nat",
      "public func equal(self : Nat, other : Nat) : Bool",
      "public func fromInt(int : Int) : Nat",
      "public func fromText(text : Text) : ?Nat",
      "public func greater(self : Nat, other : Nat) : Bool",
      "public func greaterOrEqual(self : Nat, other : Nat) : Bool",
      "public func less(self : Nat, other : Nat) : Bool",
      "public func lessOrEqual(self : Nat, other : Nat) : Bool",
      "public func max(self : Nat, other : Nat) : Nat",
      "public func min(self : Nat, other : Nat) : Nat",
      "public func mul(self : Nat, other : Nat) : Nat",
      "public type Nat",
      "public func notEqual(self : Nat, other : Nat) : Bool",
      "public func pow(self : Nat, other : Nat) : Nat",
      "public func range(self : Nat, toExclusive : Nat) : Iter.Iter<Nat>",
      "public func rangeBy(self : Nat, toExclusive : Nat, step : Int) : Iter.Iter<Nat>",
      "public func rangeByInclusive(self : Nat, to : Nat, step : Int) : Iter.Iter<Nat>",
      "public func rangeInclusive(self : Nat, to : Nat) : Iter.Iter<Nat>",
      "public func rem(self : Nat, other : Nat) : Nat",
      "public func sub(self : Nat, other : Nat) : Nat",
      "public func toInt(self : Nat) : Int",
      "public func toNat(self : Text) : ?Nat",
      "public func toText(self : Nat) : Text"
    ]
  },
  {
    "name": "Nat16",
    "exports": [
      "public func add(self : Nat16, other : Nat16) : Nat16",
      "public func addWrap(self : Nat16, other : Nat16) : Nat16",
      "public func allValues() : Iter.Iter<Nat16>",
      "public func bitand(self : Nat16, other : Nat16) : Nat16",
      "public func bitclear(self : Nat16, p : Nat) : Nat16",
      "public func bitcountLeadingZero(self : Nat16) : Nat16",
      "public func bitcountNonZero(self : Nat16) : Nat16",
      "public func bitcountTrailingZero(self : Nat16) : Nat16",
      "public func bitflip(self : Nat16, p : Nat) : Nat16",
      "public func bitnot(self : Nat16) : Nat16",
      "public func bitor(self : Nat16, other : Nat16) : Nat16",
      "public func bitrotLeft(self : Nat16, other : Nat16) : Nat16",
      "public func bitrotRight(self : Nat16, other : Nat16) : Nat16",
      "public func bitset(self : Nat16, p : Nat) : Nat16",
      "public func bitshiftLeft(self : Nat16, other : Nat16) : Nat16",
      "public func bitshiftRight(self : Nat16, other : Nat16) : Nat16",
      "public func bittest(self : Nat16, p : Nat) : Bool",
      "public func bitxor(self : Nat16, other : Nat16) : Nat16",
      "public func compare(self : Nat16, other : Nat16) : Order.Order",
      "public func div(self : Nat16, other : Nat16) : Nat16",
      "public func equal(self : Nat16, other : Nat16) : Bool",
      "public func explode(self : Nat16) : (msb : Nat8, lsb : Nat8)",
      "public let fromIntWrap : Int -> Nat16",
      "public let fromNat : Nat -> Nat16",
      "public func fromNat32(x : Nat32) : Nat16",
      "public func fromNat8(x : Nat8) : Nat16",
      "public func greater(self : Nat16, other : Nat16) : Bool",
      "public func greaterOrEqual(self : Nat16, other : Nat16) : Bool",
      "public func less(self : Nat16, other : Nat16) : Bool",
      "public func lessOrEqual(self : Nat16, other : Nat16) : Bool",
      "public func max(self : Nat16, other : Nat16) : Nat16",
      "public let maxValue : Nat16",
      "public func min(self : Nat16, other : Nat16) : Nat16",
      "public func mul(self : Nat16, other : Nat16) : Nat16",
      "public func mulWrap(self : Nat16, other : Nat16) : Nat16",
      "public type Nat16",
      "public func notEqual(self : Nat16, other : Nat16) : Bool",
      "public func pow(self : Nat16, other : Nat16) : Nat16",
      "public func powWrap(self : Nat16, other : Nat16) : Nat16",
      "public func range(self : Nat16, toExclusive : Nat16) : Iter.Iter<Nat16>",
      "public func rangeInclusive(self : Nat16, to : Nat16) : Iter.Iter<Nat16>",
      "public func rem(self : Nat16, other : Nat16) : Nat16",
      "public func sub(self : Nat16, other : Nat16) : Nat16",
      "public func subWrap(self : Nat16, other : Nat16) : Nat16",
      "public func toNat(self : Nat16) : Nat",
      "public func toNat32(self : Nat16) : Nat32",
      "public func toNat8(self : Nat16) : Nat8",
      "public func toText(self : Nat16) : Text"
    ]
  },
  {
    "name": "Nat32",
    "exports": [
      "public func add(self : Nat32, other : Nat32) : Nat32",
      "public func addWrap(self : Nat32, other : Nat32) : Nat32",
      "public func allValues() : Iter.Iter<Nat32>",
      "public func bitand(self : Nat32, other : Nat32) : Nat32",
      "public func bitclear(self : Nat32, p : Nat) : Nat32",
      "public func bitcountLeadingZero(self : Nat32) : Nat32",
      "public func bitcountNonZero(self : Nat32) : Nat32",
      "public func bitcountTrailingZero(self : Nat32) : Nat32",
      "public func bitflip(self : Nat32, p : Nat) : Nat32",
      "public func bitnot(self : Nat32) : Nat32",
      "public func bitor(self : Nat32, other : Nat32) : Nat32",
      "public func bitrotLeft(self : Nat32, other : Nat32) : Nat32",
      "public func bitrotRight(self : Nat32, other : Nat32) : Nat32",
      "public func bitset(self : Nat32, p : Nat) : Nat32",
      "public func bitshiftLeft(self : Nat32, other : Nat32) : Nat32",
      "public func bitshiftRight(self : Nat32, other : Nat32) : Nat32",
      "public func bittest(self : Nat32, p : Nat) : Bool",
      "public func bitxor(self : Nat32, other : Nat32) : Nat32",
      "public func compare(self : Nat32, other : Nat32) : Order.Order",
      "public func div(self : Nat32, other : Nat32) : Nat32",
      "public func equal(self : Nat32, other : Nat32) : Bool",
      "public func explode(self : Nat32) : (msb : Nat8, Nat8, Nat8, lsb : Nat8)",
      "public let fromIntWrap : Int -> Nat32",
      "public let fromNat : Nat -> Nat32",
      "public func fromNat16(x : Nat16) : Nat32",
      "public func fromNat64(x : Nat64) : Nat32",
      "public func greater(self : Nat32, other : Nat32) : Bool",
      "public func greaterOrEqual(self : Nat32, other : Nat32) : Bool",
      "public func less(self : Nat32, other : Nat32) : Bool",
      "public func lessOrEqual(self : Nat32, other : Nat32) : Bool",
      "public func max(self : Nat32, other : Nat32) : Nat32",
      "public let maxValue : Nat32",
      "public func min(self : Nat32, other : Nat32) : Nat32",
      "public func mul(self : Nat32, other : Nat32) : Nat32",
      "public func mulWrap(self : Nat32, other : Nat32) : Nat32",
      "public type Nat32",
      "public func notEqual(self : Nat32, other : Nat32) : Bool",
      "public func pow(self : Nat32, other : Nat32) : Nat32",
      "public func powWrap(self : Nat32, other : Nat32) : Nat32",
      "public func range(self : Nat32, toExclusive : Nat32) : Iter.Iter<Nat32>",
      "public func rangeInclusive(self : Nat32, to : Nat32) : Iter.Iter<Nat32>",
      "public func rem(self : Nat32, other : Nat32) : Nat32",
      "public func sub(self : Nat32, other : Nat32) : Nat32",
      "public func subWrap(self : Nat32, other : Nat32) : Nat32",
      "public func toChar(self : Nat32) : Char",
      "public func toNat(self : Nat32) : Nat",
      "public func toNat16(self : Nat32) : Nat16",
      "public func toNat64(self : Nat32) : Nat64",
      "public func toText(self : Nat32) : Text"
    ]
  },
  {
    "name": "Nat64",
    "exports": [
      "public func add(self : Nat64, other : Nat64) : Nat64",
      "public func addWrap(self : Nat64, other : Nat64) : Nat64",
      "public func allValues() : Iter.Iter<Nat64>",
      "public func bitand(self : Nat64, other : Nat64) : Nat64",
      "public func bitclear(self : Nat64, p : Nat) : Nat64",
      "public func bitcountLeadingZero(self : Nat64) : Nat64",
      "public func bitcountNonZero(self : Nat64) : Nat64",
      "public func bitcountTrailingZero(self : Nat64) : Nat64",
      "public func bitflip(self : Nat64, p : Nat) : Nat64",
      "public func bitnot(self : Nat64) : Nat64",
      "public func bitor(self : Nat64, other : Nat64) : Nat64",
      "public func bitrotLeft(self : Nat64, other : Nat64) : Nat64",
      "public func bitrotRight(self : Nat64, other : Nat64) : Nat64",
      "public func bitset(self : Nat64, p : Nat) : Nat64",
      "public func bitshiftLeft(self : Nat64, other : Nat64) : Nat64",
      "public func bitshiftRight(self : Nat64, other : Nat64) : Nat64",
      "public func bittest(self : Nat64, p : Nat) : Bool",
      "public func bitxor(self : Nat64, other : Nat64) : Nat64",
      "public func compare(self : Nat64, other : Nat64) : Order.Order",
      "public func div(self : Nat64, other : Nat64) : Nat64",
      "public func equal(self : Nat64, other : Nat64) : Bool",
      "public func explode(self : Nat64) : (msb : Nat8, Nat8, Nat8, Nat8, Nat8, Nat8, Nat8, lsb : Nat8)",
      "public let fromIntWrap : Int -> Nat64",
      "public let fromNat : Nat -> Nat64",
      "public func fromNat32(x : Nat32) : Nat64",
      "public func greater(self : Nat64, other : Nat64) : Bool",
      "public func greaterOrEqual(self : Nat64, other : Nat64) : Bool",
      "public func less(self : Nat64, other : Nat64) : Bool",
      "public func lessOrEqual(self : Nat64, other : Nat64) : Bool",
      "public func max(self : Nat64, other : Nat64) : Nat64",
      "public let maxValue : Nat64",
      "public func min(self : Nat64, other : Nat64) : Nat64",
      "public func mul(self : Nat64, other : Nat64) : Nat64",
      "public func mulWrap(self : Nat64, other : Nat64) : Nat64",
      "public type Nat64",
      "public func notEqual(self : Nat64, other : Nat64) : Bool",
      "public func pow(self : Nat64, other : Nat64) : Nat64",
      "public func powWrap(self : Nat64, other : Nat64) : Nat64",
      "public func range(self : Nat64, toExclusive : Nat64) : Iter.Iter<Nat64>",
      "public func rangeInclusive(self : Nat64, to : Nat64) : Iter.Iter<Nat64>",
      "public func rem(self : Nat64, other : Nat64) : Nat64",
      "public func sub(self : Nat64, other : Nat64) : Nat64",
      "public func subWrap(self : Nat64, other : Nat64) : Nat64",
      "public func toNat(self : Nat64) : Nat",
      "public func toNat32(self : Nat64) : Nat32",
      "public func toText(self : Nat64) : Text"
    ]
  },
  {
    "name": "Nat8",
    "exports": [
      "public func add(self : Nat8, other : Nat8) : Nat8",
      "public func addWrap(self : Nat8, other : Nat8) : Nat8",
      "public func allValues() : Iter.Iter<Nat8>",
      "public func bitand(self : Nat8, other : Nat8) : Nat8",
      "public func bitclear(self : Nat8, p : Nat) : Nat8",
      "public func bitcountLeadingZero(self : Nat8) : Nat8",
      "public func bitcountNonZero(self : Nat8) : Nat8",
      "public func bitcountTrailingZero(self : Nat8) : Nat8",
      "public func bitflip(self : Nat8, p : Nat) : Nat8",
      "public func bitnot(self : Nat8) : Nat8",
      "public func bitor(self : Nat8, other : Nat8) : Nat8",
      "public func bitrotLeft(self : Nat8, other : Nat8) : Nat8",
      "public func bitrotRight(self : Nat8, other : Nat8) : Nat8",
      "public func bitset(self : Nat8, p : Nat) : Nat8",
      "public func bitshiftLeft(self : Nat8, other : Nat8) : Nat8",
      "public func bitshiftRight(self : Nat8, other : Nat8) : Nat8",
      "public func bittest(self : Nat8, p : Nat) : Bool",
      "public func bitxor(self : Nat8, other : Nat8) : Nat8",
      "public func compare(self : Nat8, other : Nat8) : Order.Order",
      "public func div(self : Nat8, other : Nat8) : Nat8",
      "public func equal(self : Nat8, other : Nat8) : Bool",
      "public let fromIntWrap : Int -> Nat8",
      "public let fromNat : Nat -> Nat8",
      "public let fromNat16 : Nat16 -> Nat8",
      "public func greater(self : Nat8, other : Nat8) : Bool",
      "public func greaterOrEqual(self : Nat8, other : Nat8) : Bool",
      "public func less(self : Nat8, other : Nat8) : Bool",
      "public func lessOrEqual(self : Nat8, other : Nat8) : Bool",
      "public func max(self : Nat8, other : Nat8) : Nat8",
      "public let maxValue : Nat8",
      "public func min(self : Nat8, other : Nat8) : Nat8",
      "public func mul(self : Nat8, other : Nat8) : Nat8",
      "public func mulWrap(self : Nat8, other : Nat8) : Nat8",
      "public type Nat8",
      "public func notEqual(self : Nat8, other : Nat8) : Bool",
      "public func pow(self : Nat8, other : Nat8) : Nat8",
      "public func powWrap(self : Nat8, other : Nat8) : Nat8",
      "public func range(self : Nat8, toExclusive : Nat8) : Iter.Iter<Nat8>",
      "public func rangeInclusive(self : Nat8, to : Nat8) : Iter.Iter<Nat8>",
      "public func rem(self : Nat8, other : Nat8) : Nat8",
      "public func sub(self : Nat8, other : Nat8) : Nat8",
      "public func subWrap(self : Nat8, other : Nat8) : Nat8",
      "public func toNat(self : Nat8) : Nat",
      "public func toNat16(self : Nat8) : Nat16",
      "public func toText(self : Nat8) : Text"
    ]
  },
  {
    "name": "Option",
    "exports": [
      "public func apply<T, R>(self : ?T, f : ?(T -> R)) : ?R",
      "public func chain<T, R>(self : ?T, f : T -> ?R) : ?R",
      "public func compare<T>(self : ?T, other : ?T, cmp : (implicit : (compare : (T, T) -> Types.Order))) : Types.Order",
      "public func equal<T>(self : ?T, other : ?T, eq : (implicit : (equal : (T, T) -> Bool))) : Bool",
      "public func flatten<T>(self : ??T) : ?T",
      "public func forEach<T>(self : ?T, f : T -> ())",
      "public func get<T>(self : ?T, default : T) : T",
      "public func getMapped<T, R>(self : ?T, f : T -> R, default : R) : R",
      "public func isNull(self : ?Any) : Bool",
      "public func isSome(self : ?Any) : Bool",
      "public func map<T, R>(self : ?T, f : T -> R) : ?R",
      "public func some<T>(self : T) : ?T",
      "public func toText<T>(self : ?T, toText : (implicit : T -> Text)) : Text",
      "public func unwrap<T>(self : ?T) : T"
    ]
  },
  {
    "name": "Order",
    "exports": [
      "public func allValues() : Types.Iter<Order>",
      "public func equal(self : Order, other : Order) : Bool",
      "public func isEqual(self : Order) : Bool",
      "public func isGreater(self : Order) : Bool",
      "public func isLess(self : Order) : Bool",
      "public type Order"
    ]
  },
  {
    "name": "Principal",
    "exports": [
      "public func anonymous() : Principal",
      "public func compare(self : Principal, other : Principal) : { #less; #equal; #greater }",
      "public func equal(self : Principal, other : Principal) : Bool",
      "public func fromActor(a : actor",
      "public func fromBlob(self : Blob) : Principal",
      "public func fromText(t : Text) : Principal",
      "public func greater(self : Principal, other : Principal) : Bool",
      "public func greaterOrEqual(self : Principal, other : Principal) : Bool",
      "public func hash(self : Principal) : Types.Hash",
      "public func isAnonymous(p : Principal) : Bool",
      "public func isCanister(p : Principal) : Bool",
      "public func isController(self : Principal) : Bool",
      "public func isReserved(self : Principal) : Bool",
      "public func isSelfAuthenticating(p : Principal) : Bool",
      "public func less(self : Principal, other : Principal) : Bool",
      "public func lessOrEqual(self : Principal, other : Principal) : Bool",
      "public func notEqual(self : Principal, other : Principal) : Bool",
      "public type Principal",
      "public func toBlob(self : Principal) : Blob",
      "public func toLedgerAccount(self : Principal, subAccount : ?Blob) : Blob",
      "public func toText(self : Principal) : Text"
    ]
  },
  {
    "name": "PriorityQueue",
    "exports": [
      "public func clear<T>(self : PriorityQueue<T>)",
      "public func empty<T>() : PriorityQueue<T>",
      "public func isEmpty<T>(self : PriorityQueue<T>) : Bool",
      "public func peek<T>(self : PriorityQueue<T>) : ?T",
      "public func pop<T>( self : PriorityQueue<T>, compare : (implicit : (T, T) -> Order.Order) ) : ?T",
      "public type PriorityQueue<T>",
      "public func push<T>( self : PriorityQueue<T>, compare : (implicit : (T, T) -> Order.Order), element : T )",
      "public func singleton<T>(element : T) : PriorityQueue<T>",
      "public func size<T>(self : PriorityQueue<T>) : Nat"
    ]
  },
  {
    "name": "Queue",
    "exports": [
      "public func all<T>(self : Queue<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(self : Queue<T>, predicate : T -> Bool) : Bool",
      "public func clear<T>(self : Queue<T>)",
      "public func clone<T>(self : Queue<T>) : Queue<T>",
      "public func compare<T>(self : Queue<T>, other : Queue<T>, compare : (implicit : (T, T) -> Order.Order)) : Order.Order",
      "public func contains<T>(self : Queue<T>, equal : (implicit : (T, T) -> Bool), element : T) : Bool",
      "public func empty<T>() : Queue<T>",
      "public func equal<T>(self : Queue<T>, other : Queue<T>, equal : (implicit : (T, T) -> Bool)) : Bool",
      "public func filter<T>(self : Queue<T>, criterion : T -> Bool) : Queue<T>",
      "public func filterMap<T, U>(self : Queue<T>, project : T -> ?U) : Queue<U>",
      "public func forEach<T>(self : Queue<T>, operation : T -> ())",
      "public func fromArray<T>(array : [T]) : Queue<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>) : Queue<T>",
      "public func fromPure<T>(pureQueue : PureQueue.Queue<T>) : Queue<T>",
      "public func fromVarArray<T>(array : [var T]) : Queue<T>",
      "public func isEmpty<T>(self : Queue<T>) : Bool",
      "public func map<T, U>(self : Queue<T>, project : T -> U) : Queue<U>",
      "public func peekBack<T>(self : Queue<T>) : ?T",
      "public func peekFront<T>(self : Queue<T>) : ?T",
      "public func popBack<T>(self : Queue<T>) : ?T",
      "public func popFront<T>(self : Queue<T>) : ?T",
      "public func pushBack<T>(self : Queue<T>, element : T)",
      "public func pushFront<T>(self : Queue<T>, element : T)",
      "public type Queue<T>",
      "public func reverseValues<T>(self : Queue<T>) : Iter.Iter<T>",
      "public func singleton<T>(element : T) : Queue<T>",
      "public func size<T>(self : Queue<T>) : Nat",
      "public func toArray<T>(self : Queue<T>) : [T]",
      "public func toPure<T>(self : Queue<T>) : PureQueue.Queue<T>",
      "public func toText<T>(self : Queue<T>, format : (implicit : (toText : T -> Text))) : Text",
      "public func toVarArray<T>(self : Queue<T>) : [var T]",
      "public func values<T>(self : Queue<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "Random",
    "exports": [
      "public class AsyncRandom(state : State, generator : () -> async* Blob)",
      "public let blob : shared () -> async Blob",
      "public func crypto() : AsyncRandom",
      "public func cryptoFromState(state : State) : AsyncRandom",
      "public func emptyState() : State",
      "public class Random(state : State, generator : () -> Blob)",
      "public func seed(seed : Nat64) : Random",
      "public func seedFromState(state : SeedState) : Random",
      "public func seedState(seed : Nat64) : SeedState",
      "public type SeedState",
      "public type State"
    ]
  },
  {
    "name": "Region",
    "exports": [
      "public func grow(self : Region, newPages : Nat64) : (oldPages : Nat64)",
      "public func id(self : Region) : Nat",
      "public func loadBlob(self : Region, offset : Nat64, size : Nat) : Blob",
      "public func loadFloat(self : Region, offset : Nat64) : Float",
      "public func loadInt16(self : Region, offset : Nat64) : Int16",
      "public func loadInt32(self : Region, offset : Nat64) : Int32",
      "public func loadInt64(self : Region, offset : Nat64) : Int64",
      "public func loadInt8(self : Region, offset : Nat64) : Int8",
      "public func loadNat16(self : Region, offset : Nat64) : Nat16",
      "public func loadNat32(self : Region, offset : Nat64) : Nat32",
      "public func loadNat64(self : Region, offset : Nat64) : Nat64",
      "public func loadNat8(self : Region, offset : Nat64) : Nat8",
      "public let new : () -> Region",
      "public type Region",
      "public func size(self : Region) : (pages : Nat64)",
      "public func storeBlob(self : Region, offset : Nat64, value : Blob) : ()",
      "public func storeFloat(self : Region, offset : Nat64, value : Float) : ()",
      "public func storeInt16(self : Region, offset : Nat64, value : Int16) : ()",
      "public func storeInt32(self : Region, offset : Nat64, value : Int32) : ()",
      "public func storeInt64(self : Region, offset : Nat64, value : Int64) : ()",
      "public func storeInt8(self : Region, offset : Nat64, value : Int8) : ()",
      "public func storeNat16(self : Region, offset : Nat64, value : Nat16) : ()",
      "public func storeNat32(self : Region, offset : Nat64, value : Nat32) : ()",
      "public func storeNat64(self : Region, offset : Nat64, value : Nat64) : ()",
      "public func storeNat8(self : Region, offset : Nat64, value : Nat8) : ()"
    ]
  },
  {
    "name": "Result",
    "exports": [
      "public func assertErr(self : Result<Any, Any>)",
      "public func assertOk(self : Result<Any, Any>)",
      "public func chain<Ok1, Ok2, Err>( self : Result<Ok1, Err>, f : Ok1 -> Result<Ok2, Err> ) : Result<Ok2, Err>",
      "public func compare<Ok, Err>( self : Result<Ok, Err>, other : Result<Ok, Err>, compareOk : (implicit : (compare : (Ok, Ok) -> Order.Order)), compareErr : (implicit : (compare : (Err, Err) -> Order.Order)) ) : Order.Order",
      "public func equal<Ok, Err>( self : Result<Ok, Err>, other : Result<Ok, Err>, equalOk : (implicit : (equal : Ok, Ok) -> Bool), equalErr : (implicit : (equal : (Err, Err) -> Bool)) ) : Bool",
      "public func flatten<Ok, Err>( self : Result<Result<Ok, Err>, Err> ) : Result<Ok, Err>",
      "public func forErr<Ok, Err>(self : Result<Ok, Err>, f : Err -> ())",
      "public func forOk<Ok, Err>(self : Result<Ok, Err>, f : Ok -> ())",
      "public func fromOption<Ok, Err>(x : ?Ok, err : Err) : Result<Ok, Err>",
      "public func fromUpper<Ok, Err>( result : { #Ok : Ok; #Err : Err } ) : Result<Ok, Err>",
      "public func isErr(self : Result<Any, Any>) : Bool",
      "public func isOk(self : Result<Any, Any>) : Bool",
      "public func mapErr<Ok, Err1, Err2>( self : Result<Ok, Err1>, f : Err1 -> Err2 ) : Result<Ok, Err2>",
      "public func mapOk<Ok1, Ok2, Err>( self : Result<Ok1, Err>, f : Ok1 -> Ok2 ) : Result<Ok2, Err>",
      "public type Result<Ok, Err>",
      "public func toOption<Ok, Err>(self : Result<Ok, Err>) : ?Ok",
      "public func toUpper<Ok, Err>( self : Result<Ok, Err> ) : { #Ok : Ok; #Err : Err }"
    ]
  },
  {
    "name": "Runtime",
    "exports": [
      "public func trap(errorMessage : Text) : None",
      "public func unreachable() : None"
    ]
  },
  {
    "name": "Set",
    "exports": [
      "public func add<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T)",
      "public func addAll<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), iter : Types.Iter<T>)",
      "public func all<T>(self : Set<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(self : Set<T>, predicate : T -> Bool) : Bool",
      "public func assertValid<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order))",
      "public func clear<T>(self : Set<T>)",
      "public func clone<T>(self : Set<T>) : Set<T>",
      "public func compare<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Order.Order",
      "public func contains<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T) : Bool",
      "public func delete<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T) : Bool",
      "public func deleteAll<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), iter : Types.Iter<T>) : Bool",
      "public func difference<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func empty<T>() : Set<T>",
      "public func equal<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Types.Order)) : Bool",
      "public func filter<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), criterion : T -> Bool) : Set<T>",
      "public func filterMap<T1, T2>(self : Set<T1>, compare : (implicit : (T2, T2) -> Order.Order), project : T1 -> ?T2) : Set<T2>",
      "public func flatten<T>(self : Set<Set<T>>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func foldLeft<T, A>( self : Set<T>, base : A, combine : (A, T) -> A ) : A",
      "public func foldRight<T, A>( self : Set<T>, base : A, combine : (T, A) -> A ) : A",
      "public func forEach<T>(self : Set<T>, operation : T -> ())",
      "public func fromArray<T>(array : [T], compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func fromIter<T>(iter : Types.Iter<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func fromPure<T>(set : PureSet.Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func insert<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T) : Bool",
      "public func insertAll<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), iter : Types.Iter<T>) : Bool",
      "public func intersection<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func isEmpty<T>(self : Set<T>) : Bool",
      "public func isSubset<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Bool",
      "public func join<T>(setIterator : Types.Iter<Set<T>>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func map<T1, T2>(self : Set<T1>, compare : (implicit : (T2, T2) -> Order.Order), project : T1 -> T2) : Set<T2>",
      "public func max<T>(self : Set<T>) : ?T",
      "public func min<T>(self : Set<T>) : ?T",
      "public func remove<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T) : ()",
      "public func retainAll<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), predicate : T -> Bool) : Bool",
      "public func reverseValues<T>(self : Set<T>) : Types.Iter<T>",
      "public func reverseValuesFrom<T>( self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T ) : Types.Iter<T>",
      "public type Set<T>",
      "public func singleton<T>(element : T) : Set<T>",
      "public func size<T>(self : Set<T>) : Nat",
      "public func toArray<T>(self : Set<T>) : [T]",
      "public func toPure<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : PureSet.Set<T>",
      "public func toText<T>(self : Set<T>, toText : (implicit : T -> Text)) : Text",
      "public func union<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func values<T>(self : Set<T>) : Types.Iter<T>",
      "public func valuesFrom<T>( self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T ) : Types.Iter<T>"
    ]
  },
  {
    "name": "Stack",
    "exports": [
      "public func all<T>(self : Stack<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(self : Stack<T>, predicate : T -> Bool) : Bool",
      "public func clear<T>(self : Stack<T>)",
      "public func clone<T>(self : Stack<T>) : Stack<T>",
      "public func compare<T>(self : Stack<T>, other : Stack<T>, compare : (implicit : (T, T) -> Order.Order)) : Order.Order",
      "public func contains<T>(self : Stack<T>, equal : (implicit : (T, T) -> Bool), element : T) : Bool",
      "public func empty<T>() : Stack<T>",
      "public func equal<T>(self : Stack<T>, other : Stack<T>, equal : (implicit : (T, T) -> Bool)) : Bool",
      "public func filter<T>(self : Stack<T>, predicate : T -> Bool) : Stack<T>",
      "public func filterMap<T, U>(self : Stack<T>, project : T -> ?U) : Stack<U>",
      "public func forEach<T>(self : Stack<T>, operation : T -> ())",
      "public func fromArray<T>(array : [T]) : Stack<T>",
      "public func fromIter<T>(iter : Types.Iter<T>) : Stack<T>",
      "public func fromPure<T>(list : PureList.List<T>) : Stack<T>",
      "public func fromVarArray<T>(array : [var T]) : Stack<T>",
      "public func get<T>(self : Stack<T>, position : Nat) : ?T",
      "public func isEmpty<T>(self : Stack<T>) : Bool",
      "public func map<T, U>(self : Stack<T>, project : T -> U) : Stack<U>",
      "public func peek<T>(self : Stack<T>) : ?T",
      "public func pop<T>(self : Stack<T>) : ?T",
      "public func push<T>(self : Stack<T>, value : T)",
      "public func reverse<T>(self : Stack<T>)",
      "public func reverseValues<T>(self : Stack<T>) : Iter.Iter<T>",
      "public func singleton<T>(element : T) : Stack<T>",
      "public func size<T>(self : Stack<T>) : Nat",
      "public type Stack<T>",
      "public func tabulate<T>(size : Nat, generator : Nat -> T) : Stack<T>",
      "public func toArray<T>(self : Stack<T>) : [T]",
      "public func toPure<T>(self : Stack<T>) : PureList.List<T>",
      "public func toText<T>(self : Stack<T>, format : (implicit : (toText : T -> Text))) : Text",
      "public func toVarArray<T>(self : Stack<T>) : [var T]",
      "public func values<T>(self : Stack<T>) : Types.Iter<T>"
    ]
  },
  {
    "name": "Text",
    "exports": [
      "public func compare(self : Text, other : Text) : Order.Order",
      "public func compareWith( self : Text, other : Text, compare : (Char, Char) -> Order.Order ) : Order.Order",
      "public func concat(self : Text, other : Text) : Text",
      "public func contains(self : Text, p : Pattern) : Bool",
      "public func decodeUtf8(self : Blob) : ?Text",
      "public func encodeUtf8(self : Text) : Blob",
      "public func endsWith(self : Text, p : Pattern) : Bool",
      "public func equal(self : Text, other : Text) : Bool",
      "public func flatMap(self : Text, f : Char -> Text) : Text",
      "public func foldLeft<A>(self : Text, base : A, combine : (A, Char) -> A) : A",
      "public func fromArray(a : [Char]) : Text",
      "public let fromChar : (c : Char) -> Text",
      "public func fromIter(cs : Iter.Iter<Char>) : Text",
      "public func fromVarArray(a : [var Char]) : Text",
      "public func greater(self : Text, other : Text) : Bool",
      "public func greaterOrEqual(self : Text, other : Text) : Bool",
      "public func isEmpty(self : Text) : Bool",
      "public func join(sep : Text, ts : Iter.Iter<Text>) : Text",
      "public func less(self : Text, other : Text) : Bool",
      "public func lessOrEqual(self : Text, other : Text) : Bool",
      "public func map(self : Text, f : Char -> Char) : Text",
      "public func notEqual(self : Text, other : Text) : Bool",
      "public type Pattern",
      "public func replace(self : Text, p : Pattern, r : Text) : Text",
      "public func reverse(self : Text) : Text",
      "public func size(self : Text) : Nat",
      "public func split(self : Text, p : Pattern) : Iter.Iter<Text>",
      "public func startsWith(self : Text, p : Pattern) : Bool",
      "public func stripEnd(self : Text, p : Pattern) : ?Text",
      "public func stripStart(self : Text, p : Pattern) : ?Text",
      "public type Text",
      "public func toArray(self : Text) : [Char]",
      "public func toIter(self : Text) : Iter.Iter<Char>",
      "public func tokens(self : Text, p : Pattern) : Iter.Iter<Text>",
      "public func toLower(self : Text) : Text",
      "public func toText(self : Text) : Text",
      "public func toUpper(self : Text) : Text",
      "public func toVarArray(self : Text) : [var Char]",
      "public func trim(self : Text, p : Pattern) : Text",
      "public func trimEnd(self : Text, p : Pattern) : Text",
      "public func trimStart(self : Text, p : Pattern) : Text"
    ]
  },
  {
    "name": "Time",
    "exports": [
      "public type Duration",
      "public let now : () -> Time",
      "public type Time",
      "public type TimerId",
      "public func toNanoseconds(duration : Duration) : Nat"
    ]
  },
  {
    "name": "Timer",
    "exports": [
      "public let cancelTimer : TimerId -> ()",
      "public func recurringTimer<system>(duration : Time.Duration, job : () -> async ()) : TimerId",
      "public func setTimer<system>(duration : Time.Duration, job : () -> async ()) : TimerId",
      "public type TimerId"
    ]
  },
  {
    "name": "Tuples",
    "exports": []
  },
  {
    "name": "Types",
    "exports": [
      "public type Blob",
      "public type Bool",
      "public type Char",
      "public type Duration",
      "public type Error",
      "public type ErrorCode",
      "public type Float",
      "public type Hash",
      "public type Int",
      "public type Int16",
      "public type Int32",
      "public type Int64",
      "public type Int8",
      "public type Iter<T>",
      "public type List<T>",
      "public type Map<K, V>",
      "public type Nat",
      "public type Nat16",
      "public type Nat32",
      "public type Nat64",
      "public type Nat8",
      "public type Order",
      "public type Pattern",
      "public type Principal",
      "public type PriorityQueue<T>",
      "public type Queue<T>",
      "public type Region",
      "public type Result<T, E>",
      "public type Set<T>",
      "public type Stack<T>",
      "public type Text",
      "public type Time",
      "public type TimerId"
    ]
  },
  {
    "name": "VarArray",
    "exports": [
      "public func all<T>(self : [var T], predicate : T -> Bool) : Bool",
      "public func any<T>(self : [var T], predicate : T -> Bool) : Bool",
      "public func binarySearch<T>(self : [var T], compare : (implicit : (T, T) -> Order.Order), element : T) : { #found : Nat; #insertionIndex : Nat }",
      "public func clone<T>(self : [var T]) : [var T]",
      "public func compare<T>(self : [var T], other : [var T], compare : (implicit : (T, T) -> Order.Order)) : Order.Order",
      "public func concat<T>(self : [var T], other : [var T]) : [var T]",
      "public func empty<T>() : [var T]",
      "public func enumerate<T>(self : [var T]) : Types.Iter<(Nat, T)>",
      "public func equal<T>(self : [var T], other : [var T], equal : (implicit : (T, T) -> Bool)) : Bool",
      "public func filter<T>(self : [var T], f : T -> Bool) : [var T]",
      "public func filterMap<T, R>(self : [var T], f : T -> ?R) : [var R]",
      "public func find<T>(self : [var T], predicate : T -> Bool) : ?T",
      "public func findIndex<T>(self : [var T], predicate : T -> Bool) : ?Nat",
      "public func flatMap<T, R>(self : [var T], k : T -> Types.Iter<R>) : [var R]",
      "public func flatten<T>(self : [var [var T]]) : [var T]",
      "public func foldLeft<T, A>(self : [var T], base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(self : [var T], base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(self : [var T], f : T -> ())",
      "public func fromArray<T>(array : [T]) : [var T]",
      "public func fromIter<T>(iter : Types.Iter<T>) : [var T]",
      "public func indexOf<T>(self : [var T], equal : (implicit : (T, T) -> Bool), element : T) : ?Nat",
      "public func isEmpty<T>(self : [var T]) : Bool",
      "public func join<T>(arrays : Types.Iter<[var T]>) : [var T]",
      "public func keys<T>(self : [var T]) : Types.Iter<Nat>",
      "public func lastIndexOf<T>(self : [var T], equal : (implicit : (T, T) -> Bool), element : T) : ?Nat",
      "public func map<T, R>(self : [var T], f : T -> R) : [var R]",
      "public func mapEntries<T, R>(self : [var T], f : (T, Nat) -> R) : [var R]",
      "public func mapInPlace<T>(self : [var T], f : T -> T)",
      "public func mapResult<T, R, E>(self : [var T], f : T -> Result.Result<R, E>) : Result.Result<[var R], E>",
      "public func nextIndexOf<T>(self : [var T], equal : (implicit : (T, T) -> Bool), element : T, fromInclusive : Nat) : ?Nat",
      "public func prevIndexOf<T>(self : [var T], equal : (implicit : (T, T) -> Bool), element : T, fromExclusive : Nat) : ?Nat",
      "public func range<T>(self : [var T], fromInclusive : Int, toExclusive : Int) : Types.Iter<T>",
      "public func repeat<T>(item : T, size : Nat) : [var T]",
      "public func reverse<T>(self : [var T]) : [var T]",
      "public func reverseInPlace<T>(self : [var T]) : ()",
      "public func singleton<T>(element : T) : [var T]",
      "public func size<T>(self : [var T]) : Nat",
      "public func sliceToArray<T>(self : [var T], fromInclusive : Int, toExclusive : Int) : [T]",
      "public func sliceToVarArray<T>(self : [var T], fromInclusive : Int, toExclusive : Int) : [var T]",
      "public func sort<T>(self : [var T], compare : (implicit : (T, T) -> Order.Order)) : [var T]",
      "public func sortInPlace<T>(self : [var T], compare : (implicit : (T, T) -> Order.Order)) : ()",
      "public func tabulate<T>(size : Nat, generator : Nat -> T) : [var T]",
      "public func toArray<T>(self : [var T]) : [T]",
      "public func toText<T>(self : [var T], f : (implicit : (toText : T -> Text))) : Text",
      "public func values<T>(self : [var T]) : Types.Iter<T>"
    ]
  },
  {
    "name": "WeakReference",
    "exports": [
      "public func allocate<T>(obj : T) : WeakReference<T>",
      "public func get<T>(self : WeakReference<T>) : ?T",
      "public func isLive<T>(self : WeakReference<T>) : Bool",
      "public type WeakReference<T>"
    ]
  },
  {
    "name": "internal/BTreeHelper",
    "exports": [
      "public func deleteAndShift<T>(array : [var ?T], deleteIndex : Nat) : T",
      "public type DeletionSide",
      "public func insertAtPosition<T>(array : [var ?T], insertElement : ?T, insertIndex : Nat, currentLastElementIndex : Nat)",
      "public func insertAtPostionAndDeleteAtPosition<T>(array : [var ?T], insertElement : ?T, insertIndex : Nat, deleteIndex : Nat) : T",
      "public func insertOneAtIndexAndSplitArray<T>(array : [var ?T], insertElement : T, insertIndex : Nat) : ([var ?T], T, [var ?T])",
      "public func mergeParentWithChildrenAndDelete<T>( parentElement : ?T, childCount : Nat, leftChild : [var ?T], rightChild : [var ?T], deleteIndex : Nat, deletionSide : DeletionSide ) : ([var ?T], T)",
      "public func replaceTwoWithElementAndShift<T>(array : [var ?T], element : T, replaceIndex : Nat)",
      "public func splitArrayAndInsertTwo<T>(children : [var ?T], rebalancedChildIndex : Nat, leftChildInsert : T, rightChildInsert : T) : ([var ?T], [var ?T])"
    ]
  },
  {
    "name": "internal/PRNG",
    "exports": [
      "public class SFC64(p : Nat64, q : Nat64, r : Nat64)",
      "public func sfc64a() : SFC64"
    ]
  },
  {
    "name": "pure/List",
    "exports": [
      "public func all<T>(self : List<T>, f : T -> Bool) : Bool",
      "public func any<T>(self : List<T>, f : T -> Bool) : Bool",
      "public func chunks<T>(self : List<T>, n : Nat) : List<List<T>>",
      "public func compare<T>(list1 : List<T>, list2 : List<T>, compareItem : (implicit : (compare : (T, T) -> Order.Order))) : Order.Order",
      "public func concat<T>(self : List<T>, other : List<T>) : List<T>",
      "public func contains<T>(self : List<T>, equal : (implicit : (T, T) -> Bool), item : T) : Bool",
      "public func drop<T>(self : List<T>, n : Nat) : List<T>",
      "public func empty<T>() : List<T>",
      "public func enumerate<T>(self : List<T>) : Iter.Iter<(Nat, T)>",
      "public func equal<T>(list1 : List<T>, list2 : List<T>, equalItem : (implicit : (equal : (T, T) -> Bool))) : Bool",
      "public func filter<T>(self : List<T>, f : T -> Bool) : List<T>",
      "public func filterMap<T, R>(self : List<T>, f : T -> ?R) : List<R>",
      "public func find<T>(self : List<T>, f : T -> Bool) : ?T",
      "public func findIndex<T>(self : List<T>, f : T -> Bool) : ?Nat",
      "public func flatten<T>(self : List<List<T>>) : List<T>",
      "public func foldLeft<T, A>(self : List<T>, base : A, combine : (A, T) -> A) : A",
      "public func foldRight<T, A>(self : List<T>, base : A, combine : (T, A) -> A) : A",
      "public func forEach<T>(self : List<T>, f : T -> ())",
      "public func fromArray<T>(array : [T]) : List<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>) : List<T>",
      "public func fromVarArray<T>(array : [var T]) : List<T>",
      "public func get<T>(self : List<T>, n : Nat) : ?T",
      "public func isEmpty<T>(self : List<T>) : Bool",
      "public func join<T>(iter : Iter.Iter<List<T>>) : List<T>",
      "public func last<T>(self : List<T>) : ?T",
      "public type List<T>",
      "public func map<T1, T2>(self : List<T1>, f : T1 -> T2) : List<T2>",
      "public func mapResult<T, R, E>(self : List<T>, f : T -> Result.Result<R, E>) : Result.Result<List<R>, E>",
      "public func merge<T>(self : List<T>, other : List<T>, compare : (implicit : (T, T) -> Order.Order)) : List<T>",
      "public func partition<T>(self : List<T>, f : T -> Bool) : (List<T>, List<T>)",
      "public func popFront<T>(self : List<T>) : (?T, List<T>)",
      "public func pushFront<T>(self : List<T>, item : T) : List<T>",
      "public func repeat<T>(item : T, n : Nat) : List<T>",
      "public func reverse<T>(self : List<T>) : List<T>",
      "public func singleton<T>(item : T) : List<T>",
      "public func size<T>(self : List<T>) : Nat",
      "public func split<T>(self : List<T>, n : Nat) : (List<T>, List<T>)",
      "public func tabulate<T>(n : Nat, f : Nat -> T) : List<T>",
      "public func take<T>(self : List<T>, n : Nat) : List<T>",
      "public func toArray<T>(self : List<T>) : [T]",
      "public func toText<T>(self : List<T>, f : (implicit : T -> Text)) : Text",
      "public func toVarArray<T>(self : List<T>) : [var T]",
      "public func values<T>(self : List<T>) : Iter.Iter<T>",
      "public func zip<T, U>(self : List<T>, other : List<U>) : List<(T, U)>",
      "public func zipWith<T, U, V>(self : List<T>, other : List<U>, f : (T, U) -> V) : List<V>"
    ]
  },
  {
    "name": "pure/Map",
    "exports": [
      "public func add<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K, value : V) : Map<K, V>",
      "public func all<K, V>(self : Map<K, V>, pred : (K, V) -> Bool) : Bool",
      "public func any<K, V>(self : Map<K, V>, pred : (K, V) -> Bool) : Bool",
      "public func assertValid<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order)) : ()",
      "public func compare<K, V>(self : Map<K, V>, other : Map<K, V>, compareKey : (implicit : (compare : (K, K) -> Order.Order)), compareValue : (implicit : (compare : (V, V) -> Order.Order))) : Order.Order",
      "public func containsKey<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : Bool",
      "public func delete<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : (Map<K, V>, Bool)",
      "public func empty<K, V>() : Map<K, V>",
      "public func entries<K, V>(self : Map<K, V>) : Iter.Iter<(K, V)>",
      "public func equal<K, V>(self : Map<K, V>, other : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), equal : (implicit : (V, V) -> Bool)) : Bool",
      "public func filter<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), criterion : (K, V) -> Bool) : Map<K, V>",
      "public func filterMap<K, V1, V2>(self : Map<K, V1>, compare : (implicit : (K, K) -> Order.Order), f : (K, V1) -> ?V2) : Map<K, V2>",
      "public func foldLeft<K, V, A>( self : Map<K, V>, base : A, combine : (A, K, V) -> A ) : A",
      "public func foldRight<K, V, A>( self : Map<K, V>, base : A, combine : (K, V, A) -> A ) : A",
      "public func forEach<K, V>(self : Map<K, V>, operation : (K, V) -> ())",
      "public func fromIter<K, V>(iter : Iter.Iter<(K, V)>, compare : (implicit : (K, K) -> Order.Order)) : Map<K, V>",
      "public func get<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : ?V",
      "public func insert<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K, value : V) : (Map<K, V>, Bool)",
      "public func isEmpty<K, V>(self : Map<K, V>) : Bool",
      "public func keys<K, V>(self : Map<K, V>) : Iter.Iter<K>",
      "public func map<K, V1, V2>(self : Map<K, V1>, f : (K, V1) -> V2) : Map<K, V2>",
      "public type Map<K, V>",
      "public func maxEntry<K, V>(self : Map<K, V>) : ?(K, V)",
      "public func minEntry<K, V>(self : Map<K, V>) : ?(K, V)",
      "public func remove<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : Map<K, V>",
      "public func replace<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K, value : V) : (Map<K, V>, ?V)",
      "public func reverseEntries<K, V>(self : Map<K, V>) : Iter.Iter<(K, V)>",
      "public func singleton<K, V>(key : K, value : V) : Map<K, V>",
      "public func size<K, V>(self : Map<K, V>) : Nat",
      "public func swap<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K, value : V) : (Map<K, V>, ?V)",
      "public func take<K, V>(self : Map<K, V>, compare : (implicit : (K, K) -> Order.Order), key : K) : (Map<K, V>, ?V)",
      "public func toText<K, V>(self : Map<K, V>, keyFormat : (implicit : (toText : K -> Text)), valueFormat : (implicit : (toText : V -> Text))) : Text",
      "public func values<K, V>(self : Map<K, V>) : Iter.Iter<V>"
    ]
  },
  {
    "name": "pure/Queue",
    "exports": [
      "public func all<T>(self : Queue<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(self : Queue<T>, predicate : T -> Bool) : Bool",
      "public func compare<T>(self : Queue<T>, other : Queue<T>, compareItem : (implicit : (compare : (T, T) -> Order.Order))) : Order.Order",
      "public func contains<T>(self : Queue<T>, equal : (implicit : (T, T) -> Bool), item : T) : Bool",
      "public func empty<T>() : Queue<T>",
      "public func equal<T>(self : Queue<T>, other : Queue<T>, equal : (implicit : (T, T) -> Bool)) : Bool",
      "public func filter<T>(self : Queue<T>, predicate : T -> Bool) : Queue<T>",
      "public func filterMap<T, U>(self : Queue<T>, f : T -> ?U) : Queue<U>",
      "public func forEach<T>(self : Queue<T>, f : T -> ())",
      "public func fromArray<T>(array : [T]) : Queue<T>",
      "public func fromIter<T>(iter : Iter.Iter<T>) : Queue<T>",
      "public func isEmpty<T>(self : Queue<T>) : Bool",
      "public func map<T1, T2>(self : Queue<T1>, f : T1 -> T2) : Queue<T2>",
      "public func peekBack<T>(self : Queue<T>) : ?T",
      "public func peekFront<T>(self : Queue<T>) : ?T",
      "public func popBack<T>(self : Queue<T>) : ?(Queue<T>, T)",
      "public func popFront<T>(self : Queue<T>) : ?(T, Queue<T>)",
      "public func pushBack<T>(self : Queue<T>, element : T) : Queue<T>",
      "public func pushFront<T>(self : Queue<T>, element : T) : Queue<T>",
      "public type Queue<T>",
      "public func reverse<T>(self : Queue<T>) : Queue<T>",
      "public func singleton<T>(item : T) : Queue<T>",
      "public func size<T>(self : Queue<T>) : Nat",
      "public func toArray<T>(self : Queue<T>) : [T]",
      "public func toText<T>(self : Queue<T>, f : (implicit : (toText : T -> Text))) : Text",
      "public func values<T>(self : Queue<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "pure/RealTimeQueue",
    "exports": [
      "public func all<T>(self : Queue<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(self : Queue<T>, predicate : T -> Bool) : Bool",
      "public func compare<T>(self : Queue<T>, other : Queue<T>, compareItem : (implicit : (compare : (T, T) -> Types.Order))) : Types.Order",
      "public func contains<T>(self : Queue<T>, equal : (implicit : (T, T) -> Bool), item : T) : Bool",
      "public func empty<T>() : Queue<T>",
      "public func equal<T>(self : Queue<T>, other : Queue<T>, equal : (implicit : (T, T) -> Bool)) : Bool",
      "public func filter<T>(self : Queue<T>, predicate : T -> Bool) : Queue<T>",
      "public func filterMap<T, U>(self : Queue<T>, f : T -> ?U) : Queue<U>",
      "public func forEach<T>(self : Queue<T>, f : T -> ())",
      "public func fromIter<T>(iter : Iter<T>) : Queue<T>",
      "public func isEmpty<T>(self : Queue<T>) : Bool",
      "public func map<T1, T2>(self : Queue<T1>, f : T1 -> T2) : Queue<T2>",
      "public func peekBack<T>(self : Queue<T>) : ?T",
      "public func peekFront<T>(self : Queue<T>) : ?T",
      "public func popBack<T>(self : Queue<T>) : ?(Queue<T>, T)",
      "public func popFront<T>(self : Queue<T>) : ?(T, Queue<T>)",
      "public func pushBack<T>(self : Queue<T>, element : T) : Queue<T>",
      "public func pushFront<T>(self : Queue<T>, element : T) : Queue<T>",
      "public type Queue<T>",
      "public func reverse<T>(self : Queue<T>) : Queue<T>",
      "public func singleton<T>(element : T) : Queue<T>",
      "public func size<T>(self : Queue<T>) : Nat",
      "public func toText<T>(self : Queue<T>, f : (implicit : (toText : T -> Text))) : Text",
      "public func values<T>(self : Queue<T>) : Iter.Iter<T>"
    ]
  },
  {
    "name": "pure/Set",
    "exports": [
      "public func add<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), elem : T) : Set<T>",
      "public func all<T>(self : Set<T>, predicate : T -> Bool) : Bool",
      "public func any<T>(self : Set<T>, pred : T -> Bool) : Bool",
      "public func assertValid<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : ()",
      "public func compare<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Order.Order",
      "public func contains<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T) : Bool",
      "public func delete<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T) : (Set<T>, Bool)",
      "public func difference<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func empty<T>() : Set<T>",
      "public func equal<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Bool",
      "public func filter<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), criterion : T -> Bool) : Set<T>",
      "public func filterMap<T1, T2>(self : Set<T1>, compare : (implicit : (T2, T2) -> Order.Order), project : T1 -> ?T2) : Set<T2>",
      "public func flatten<T>(self : Set<Set<T>>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func foldLeft<T, A>( self : Set<T>, base : A, combine : (A, T) -> A ) : A",
      "public func foldRight<T, A>( self : Set<T>, base : A, combine : (T, A) -> A ) : A",
      "public func forEach<T>(self : Set<T>, operation : T -> ())",
      "public func fromIter<T>(iter : Iter.Iter<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func insert<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), elem : T) : (Set<T>, Bool)",
      "public func intersection<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func isEmpty<T>(self : Set<T>) : Bool",
      "public func isSubset<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Bool",
      "public func join<T>(self : Iter.Iter<Set<T>>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func map<T1, T2>(self : Set<T1>, compare : (implicit : (T2, T2) -> Order.Order), project : T1 -> T2) : Set<T2>",
      "public func max<T>(self : Set<T>) : ?T",
      "public func min<T>(self : Set<T>) : ?T",
      "public func remove<T>(self : Set<T>, compare : (implicit : (T, T) -> Order.Order), element : T) : Set<T>",
      "public func reverseValues<T>(self : Set<T>) : Iter.Iter<T>",
      "public type Set<T>",
      "public func singleton<T>(element : T) : Set<T>",
      "public func size<T>(self : Set<T>) : Nat",
      "public func toText<T>(self : Set<T>, elementFormat : (implicit : (toText : T -> Text))) : Text",
      "public func union<T>(self : Set<T>, other : Set<T>, compare : (implicit : (T, T) -> Order.Order)) : Set<T>",
      "public func values<T>(self : Set<T>) : Iter.Iter<T>"
    ]
  }
]